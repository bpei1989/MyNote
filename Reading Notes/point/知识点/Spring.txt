1、什么是Spring框架？Spring框架有哪些主要模块？
Spring框架至今已集成了20多个模块。这些模块主要被分如下图所示的核心容器、数据访问/集成,、Web、AOP（面向切面编程）、工具、消息和测试模块
Spring是一个轻量级的IOC和AOP容器框架
a,轻量级：占用资源不是很多，没有侵入性；
b，IOC（Inversion of Control 控制反转）：对象创建责任的反转（重点，核心）；
c, Aop(Aspect Oriented Programming):一种面向横切面编程的思想方式，可以进行功能性扩展d，容器：可以容纳对象，并且可以控制对象的生命周期；

Spring框架由如下模块组成
(1)核心Spring容器：负责bean创建，配置和管理等，其中Bean Factory提供了依赖注入
(2)AOP模块：面向切面编程模块
(3)数据访问与集成：JdbcTemplate和对ORM框架的集成，如iBATIS
(4)Web和远程调用：集成MVC，Spring MVC和远程调用
(5)测试：集成测试模块来测试Spring应用

2、使用Spring框架能带来哪些好处？
•	Dependency Injection(DI) 方法使得构造器和JavaBean properties文件中的依赖关系一目了然。
•	Spring可以集成其他框架，如ORM框架等
•	利用JavaBean形式的POJO类，可以很方便的利用依赖注入来写入测试数据。
•	Spring MVC提供了对Web的支持

3、什么是控制反转(IOC)？什么是依赖注入？
控制反转：Spring容器来实现相互依赖对象的创建、协调工作。对象只需要关系业务逻辑本身就可以了。从这方面来说，对象如何得到他的协作对象的责任被反转了
IoC的一个重点是在系统运行中，动态的向某个对象提供它所需要的其他对象。这一点是通过DI（Dependency Injection，依赖注入）来实现的。比如对象A需要操作数据库，以前我们总是要在A中自己编写代码来获得一个Connection对象，有了 spring我们就只需要告诉spring，A中需要一个Connection，至于这个Connection怎么构造，何时构造，A不需要知道。在系统运行时，spring会在适当的时候制造一个Connection，然后像打针一样，注射到A当中，这样就完成了对各个对象之间关系的控制。A需要依赖 Connection才能正常运行，而这个Connection是由spring注入到A中的，依赖注入的名字就这么来的。那么DI是如何实现的呢？ Java 1.3之后一个重要特征是反射（reflection），它允许程序在运行的时候动态的生成对象、执行对象的方法、改变对象的属性，spring就是通过反射来实现注入的
在Java中依然注入有以下三种实现方式：构造器注入；Setter方法注入；接口注入

5、BeanFactory和ApplicationContext有什么区别？
BeanFactory 可以理解为含有bean集合的工厂类。产生bean对象
application context如同bean factory一样具有bean定义、bean关联关系的设置，根据请求分发bean的功能。但application context在此基础上还提供了其他的功能，如统一的资源文件读取方式
等
25、Spring 框架中都用到了哪些设计模式？
Spring框架中使用到了大量的设计模式，下面列举了比较有代表性的：
•	代理模式—在AOP和remoting中被用的比较多。
•	单例模式—在spring配置文件中定义的bean默认为单例模式。
•	模板方法—用来解决代码重复的问题。比如. RestTemplate, JmsTemplate, JpaTemplate。
•	前端控制器—Spring提供了DispatcherServlet来对请求进行分发。
•	视图帮助(View Helper )—Spring提供了一系列的JSP标签，高效宏来辅助将分散的代码整合在视图里。
•	依赖注入—贯穿于BeanFactory / ApplicationContext接口的核心理念。
•	工厂模式—BeanFactory用来创建对象的实例。

AOP模块
SpringAOP的实现机制：
Spring AOP采用动态代理机制和字节码生成技术实现
默认情况下，如果Spring AOP发现目标对象实现了相应Interface，则采用动态代理机制为其生成代理对象实例。而如果目标对象没有实现任何Interface，Spring AOP会尝试使用CGLIB(Code Generation Library)这种动态字节码生成类库，为目标对象生成动态的代理对象实例。


反射
有一个叫Class的类，它是反射的源头，当我们编写一个类，编译完成后，在生成的.class文件中，就会产生一个Class对象，用于表示这个类的类型信息。Class类不是我们创建的，是由java虚拟机，在我们生成.class文件的时候创建的，Class 类的实例表示正在运行的 Java 应用程序中的类和接口
我们需要使用反射，就要获得Class这个类，Class.forName("cn.classes.OneClass");来获取，还有其他方式比如getClass。然后再根据Class类实例化。
bean.xml
<bean id="id" class="com.xy.Student" />
Spring将采用的代码创建代码Java实例
Class c = Class.forName("com.xy.Student");
Object bean = c.newInstance();


DI
public class SimpleIoc {
	private static final Map<Class<?>, Object> BEAN_MAP = new HashMap<Class<?>, Object>();

	private static Set<Class<?>> beanClassSet = new HashSet<Class<?>>();

	//根据指定包扫描有注解@Bean获取Class
	private static void initClassSet() {
		for(bean:filesInPackage) {
			beanClassSet.add(Class.forName(bean.getClassName()));
		}
	}

	private static void initBeanMap() {
		for (Class<?> beanClass : beanClassSet) {
			Object obj = beanClass.newInstance().newInstance(beanClass);
			BEAN_MAP.put(beanClass, obj);
		}
	}

	public static void IocInit() {
		for(Map.Entry<Class<?>,Object>beanEntry : BEAN_MAP.entrySet()) {
			Class<?> beanClass = beanEntry.getKey();
			Object beanInstance = beanEntry.getValue();
			//获取Bean定义的所有成员变量
			Field[] beanFileds = beanClass.getDeclaredFileds();
			for(Field beanField : beanFileds) {
				if(beanFiled.isAnnotation()) {//判断是否带有注解，注入其实例对象
					Class<?> beanFiledClass = beanFiled.getType();
					Object beanFiledInstance = BEAN_MAP.get(beanFiledClass);
					ReflectionUtil.setFiled(beanInstance, beanFiled, beanFiledInstance);
				}

			}
		}
	}

}
基本步骤：先遍历包内有Bean注解的类，存到Set里，然后逐个取其Class存到另一个Set里，再逐个取出得到Instance，放到Map里，最后遍历Map，得到Field(通过getDeclaredFileds())，根据Filed从map里找到其实例对象，再把Instanceset set进去，这就是为什么需要有set方法
反射机制指的是程序在运行时能够获取自身的信息。在java中，只要给定类的名字， 
那么就可以通过反射机制来获得类的所有信息。 反射机制的优点就是可以实现动态创建对象，即在运行时中创建而不是编译


AOP
(1)JDK动态代理
实现InvocationHandler接口，实现invoke方法，该方法通过反射invoke method，在调用前before方法，调用后after方法，再返回
调用时需要用newProxyInstance动态创建一个接口代理类，newProxyInstance(被代理.ClassLoader,该实现类的接口，动态代理对象)
public Interface Hello {
	void say(String name);
}
public class HelloImp implements Hello {
	...
}

public class DynamicProxy implements InvocationHandler {
	private Object target;//被代理目标对象，通过构造方法注入，即反射

	public DynamicProxy(Object object) {
		this.target = target;
	}

	@Override
	public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {
		before();
		Object result = method.invoke(target, args);
		after();
		return result;
	}

	@SupressingWarnings("unchecked")
	public <T> T getProxy() {
		return (T) Proxy.newProxyInstance(target.getClass.getClassLoader,
										target.getClass.getInterfaces(),
										this);
	}

	public static void main(String[] args) {
		HelloImp hello = new HelloImp();
		DynamicProxy dynamicProxy = new DynamicProxy(hello);
		Hello proxy = dynamicProxy.getProxy();

		proxy.say("Tom");
	}
}
注，核心步骤是实现InvocationHandler，实现invoke方法，注意invoke方法的参数，invoke方法里会用反射调用method，执行目标对象的函数，所以需要目标对象和参数；执行Proxy.newProxyInstance，参数是目标类的ClassLoader，目标类的接口Class，实现InvocationHandler的对象，因为需要把目标接口通过ClassLoader加载，然后通过InvocationHandler的invoke方法执行，所以需要这么做

(2)CGlib动态代理
这个不需要接口，CGlib是一个在运行时动态生成字节码的工具，可以生成动态代理类
public class CGLibProxy implements MethodInterceptor {
	public <T> T getProxy(Class<T> cls) {
		return (T) Enhancer.create(cls, this);//Enhancer生成代理类Instance
	}

	public Object intercept(Object obj, Method method, Object[] args, MethodProxy proxy) throws Throwable {
		before();
		Object result = proxy.invokeSuper(obj, args);
		after();
		return result;
	}

	public static void main(String[] args) {
		CGLibProxy cgLibProxy = new CGLibProxy();
		Hello helloProxy = cgLibProxy.getProxy(HelloImp.class);
		helloProxy.say("Tom");
	}
}
注：实现MethodInterceptor接口，intercept方法，getProxy方法，其中有Enhancer，invokeSuper调被代理类的方法
其实CGLib是实现了一个目标方法的子类，在子类中进行代理
java动态代理是利用反射机制生成一个实现代理接口的匿名类，在调用具体方法前调用InvokeHandler来处理。而cglib动态代理是利用asm开源包，对代理对象类的class文件加载进来，通过修改其字节码生成子类来处理

1、如果目标对象实现了接口，默认情况下会采用JDK的动态代理实现AOP 
2、如果目标对象实现了接口，可以强制使用CGLIB实现AOP 
3、如果目标对象没有实现了接口，必须采用CGLIB库，spring会自动在JDK动态代理和CGLIB之间转换


13.Spring IoC容器是什么？
Spring IOC负责创建对象、管理对象(通过依赖注入)、整合对象、配置对象以及管理这些对象的生命周期。


19.有哪些不同类型的IOC(依赖注入)？
•	构造器依赖注入：构造器依赖注入在容器触发构造器的时候完成，该构造器有一系列的参数，每个参数代表注入的对象。
•	Setter方法依赖注入：首先容器会触发一个无参构造函数或无参静态工厂方法实例化对象，之后容器调用bean中的setter方法完成Setter方法依赖注入。
20.你推荐哪种依赖注入？构造器依赖注入还是Setter方法依赖注入？
你可以同时使用两种方式的依赖注入，最好的选择是使用构造器参数实现强制依赖注入，使用setter方法实现可选的依赖关系。


21.什么是Spring Beans？
Spring Beans是构成Spring应用核心的Java对象。这些对象由Spring IOC容器实例化、组装、管理。这些对象通过容器中配置的元数据创建，例如，使用XML文件中定义的创建。

22.Spring Bean中定义了什么内容？
Spring Bean中定义了所有的配置元数据，这些配置信息告知容器如何创建它，它的生命周期是什么以及它的依赖关系。

24.你如何定义bean的作用域？
在Spring中创建一个bean的时候，我们可以声明它的作用域。只需要在bean定义的时候通过’scope’属性定义即可。

25.说一下Spring中支持的bean作用域
Spring框架支持如下五种不同的作用域：
•	singleton：在Spring IOC容器中仅存在一个Bean实例，Bean以单实例的方式存在。
•	prototype：一个bean可以定义多个实例。
•	request：每次HTTP请求都会创建一个新的Bean。该作用域仅适用于WebApplicationContext环境。
•	session：一个HTTP Session定义一个Bean。该作用域仅适用于WebApplicationContext环境.
•	globalSession：同一个全局HTTP Session定义一个Bean。该作用域同样仅适用于WebApplicationContext环境.
bean默认的scope属性是’singleton‘。

26.Spring框架中单例beans是线程安全的吗？
不是，Spring框架中的单例beans不是线程安全的

28.哪些是最重要的bean生命周期方法？能重写它们吗？
生命周期基本是：•	Spring容器读取XML文件中bean的定义并实例化bean，Spring根据bean的定义设置属性值，销毁
有两个重要的bean生命周期方法。第一个是setup方法，该方法在容器加载bean的时候被调用。第二个是teardown方法，该方法在bean从容器中移除的时候调用。

30.如何在Spring中注入Java集合类？
Spring提供如下几种类型的集合配置元素：
•	list元素用来注入一系列的值，允许有相同的值。
•	set元素用来注入一些列的值，不允许有相同的值。
•	map用来注入一组”键-值”对，键、值可以是任何类型的。
•	props也可以用来注入一组”键-值”对，这里的键、值都字符串类型。

31.什么是bean wiring？
Wiring，或者说bean Wiring是指beans在Spring容器中结合在一起的情况。当装配bean的时候，Spring容器需要知道需要哪些beans以及如何使用依赖注入将它们结合起来。

32.什么是bean自动装配？
Spring容器可以自动配置相互协作beans之间的关联关系

33.解释自动装配的各种模式？
自动装配提供五种不同的模式供Spring容器用来自动装配beans之间的依赖注入:
•	no：默认的方式是不进行自动装配，通过手工设置ref 属性来进行装配bean。
•	byName：通过参数名自动装配，Spring容器查找beans的属性，这些beans在XML配置文件中被设置为byName。之后容器试图匹配、装配和该bean的属性具有相同名字的bean。
•	byType：通过参数的数据类型自动自动装配，Spring容器查找beans的属性，这些beans在XML配置文件中被设置为byType。之后容器试图匹配和装配和该bean的属性类型一样的bean。如果有多个bean符合条件，则抛出错误。
•	constructor：这个同byType类似，不过是应用于构造函数的参数。如果在BeanFactory中不是恰好有一个bean与构造函数参数相同类型，则抛出一个严重的错误。
•	autodetect：如果有默认的构造方法，通过 construct的方式自动装配，否则使用 byType的方式自动装配。

35.你可以在Spring中注入null或空字符串吗？
完全可以。

38.如何开启注解装配？
注解装配默认情况下在Spring容器中是不开启的。如果想要开启基于注解的装配只需在Spring配置文件中配置元素即可。如@Autowired 注解
<context:component-scan base-package="com.kedacom.ksoa" /> 
 <context:annotation-config /> 
 
51.解释AOP
面向切面编程,或AOP允许程序员模块化横向业务逻辑，或定义核心部分的功能，例如日志管理和事务管理。

52.切面
通知和切点的集合，即什么，在何时在何处，通用行为封装为可重用的模块
public class Audience {
	public void takeSeats() { //表演之前
		System.out.println("The audience is taking seats");
	}
	public void applaud() { //表演之后
		System.out.println("CALP..");
	}
	public void demandRefund() { //表演失败后
		System.out.println("Boo! I want my money back!");
	}
}
<aop:config>
	<!--注意，必须引用这个类-->
	<aop:aspect ref="audience">
		<aop:before pointcut=
			"execution(* com.springinaction.springidol.Performer.perform(..))"
			method="takeSeats"/>
		<aop:after-returning pointcut=
			"execution(* com.springinaction.springidol.Performer.perform(..))"
			method="applaud"/>
		<aop:after-throwing pointcut=
			"execution(* com.springinaction.springidol.Performer.perform(..))">
			method="demandRefund"/>
	</aop:aspect>
</aop:config>

(1)通知(Advice）：规定切面是什么，何时使用，切面可以使用五中类型：
Before,方法调用之前调用通知
After,方法调用之后调用通知，无论方法是否成功
After-returnning,方法执行成功之后调用通知
After-throwing,方法抛出异常时调用通知
Around，通知包裹了通知的方法，在通知方法调用之前和调用之后执行的自定义行为
(2)连接点（Joinpoint）：在应用执行过程中能够插入切面的一个点，这个点可以是调用方法时，抛出异常时等，切面代码可以李忠这些点插入到应用中
(3)切点(Pointcut)：何处，匹配导致要植入的一个或多个连接点
(4)切面(Aspect)：通知和切点的集合，即什么，在何时在何处，在那个方法（何处），执行前还是执行后（何时），做什么（即before/after调用的方法）
(5)引入(Introduction):允许向现有泪添加新方法或属性
(6)织入(Weaving):将切面织入到目标对象来创建新的代理对象的过程。目标对象有多个点可以织入：编译期，类加载期（需要ClassLoader），运行期（Spring AOP就是用这种方式，通过为目标对象动态创建一个代理对象）


64.什么是Spring的MVC框架？
Spring提供了一个功能齐全的MVC框架用于构建Web应用程序

65.DispatcherServlet
Spring的MVC框架围绕DispatcherServlet来设计的，它用来处理所有的HTTP请求和响应。

67.什么是Spring MVC框架的控制器？
控制器解析用户的输入，并将其转换为一个由视图呈现给用户的模型

68.@Controller annotation
@Controller注解表示该类扮演控制器的角色。Spring不需要继承任何控制器基类或应用Servlet API。

69.@RequestMapping annotation
@RequestMapping注解用于将URL映射到任何一个类或者一个特定的处理方法上。

Mybatis
据经过controller 再经过service 然后执行service中的相关方法并关联到mapper 再执行mapper.xml中的sql语句
1：使用连接池，datasource，在驱动并连接的这个过程中优化并解耦
2：统一sql存取到XML
3：参数和结果集映射

factory方法获取sqlsession----通过MapperProxy代理到dao--执行底层数据库操作
    <!-- 1、数据库配置参数 -->
    <context:property-placeholder location="classpath:dao/jdbc.properties" ignore-unresolvable="true"/>

	<!-- 2.配置dataSource -->
     <bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
		<property name="driverClassName" value="${jdbc.driverClassName}"/>
		<property name="url" value="${jdbc.url}"/>
		<property name="username" value="${jdbc.username}"/>
		<property name="password" value="${jdbc.password}"/>
	</bean>
    

    <!-- 3、配置连接池 -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <!-- 注入数据库连接池 -->
        <property name="dataSource" ref="dataSource"/>
        <!-- 自动使用别名,多个用;隔开 -->
        <property name="typeAliasesPackage" value="com.myplatform.web.entity"/>
        <!--扫描sql配置文件:mapper需要的xml文件-->
        <property name="mapperLocations" value="classpath:mapper/*.xml"/>
    </bean>

    <!-- 4、扫描Dao接口包,注入到spring容器 -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <!-- 注入SqlSessionFactory -->
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
        <!-- 给出需要扫描的Dao接口-->
        <property name="basePackage" value="com.myplatform.web.dao"/>
    </bean>

主要有几点： 一个结果类，即typeAliasesPackage定义；一个查询方法接口，即MapperScannerConfigurer定义basePackage" value="com.myplatform.web.dao，接口 通过basePackage中的方法，factory方法获取sqlsession，在调用mapper执行sql，返回结果放到结果类
如
查询方法接口:
public Interface xxx {
	List<Result> getList(int start， int end) {}
}

Mapper
查询方法接口
<mapper namespace="com.myplatform.web.dao.TestCaseDao" >

	<select id="queryAll" resultType="TestCase">
		SELECT *
		FROM testcase
		ORDER BY id DESC
		limit #{offset},#{limit}
	</select>

TestCase：
public class TestCase {
	private int id;
	private String level;
	private String descripton;
	setter
	getter
}
其中各个名字必须一致，比如方法名，类型等