第一章： 引言
规则不会百分之百地使用于任何时刻和场合，但是，它们确实体现了绝大多数情况下的最佳程序设计实践。你不应该盲目地遵从这些规则，但是，你应该只在偶尔的情况下，有充分的理由之后才去打破这些规则。同大多数学科一样，编程首先要学会基本规则，然后才能知道什么时候可以打破这些规则。
本书大部分内容不是讨论性能的，而是关心如何编写出清晰，正确，可用，健壮，灵活和可维护的程序，如果能做到这一点的话，性能往往会比较容易获取。（注：因为只有做到清晰正确可用可维护，才可能调优，反过来，一般做到这几点的，性能也不会差到哪儿去）



第二章： 创建和销毁对象
第一条，	考虑用静态工厂方法替代构造器
例如：如果HashMap有静态工厂方法，就可以这么写：
public static <K, V> HashMap<K, V> newInstance() {
	return new HashMap<K, V>();
}

Map<String, List<String>> m = HashMap.newInstance();

静态工厂方法其实就是返回一个实例，不用公用构造器，可以起其他名字，比如valueOf

静态工厂方法的优点： 静态工厂方法有名称，更准确描述返回对象； 直接调用，因为是静态方法； 可以返回原返回类型的任何子类型的对象，更灵活； 创建对象是代码简洁
缺点： 不能子类化，需要辅助公用构造器才行
总结：静态工厂方法和公有构造器各有用处，但静态工厂方法往往更适用，所以不要第一反应是公有的构造器，而是要考虑用静态工厂方法


第二条， 遇到多个构造器参数时要考虑用构建器（Builder）
参数过多时，就得用多个构造器，分别对应不同的参数来创建类，可是这样比较繁琐，而且可读性差，如果用JavaBean模式，调用一个无参构造器，然后调用setter方法，但这种方法可能会有线程安全的问题，因为setter是分别进行的

Builder是让客户端利先获取到一个builder对象，然后客户端在builder对象上调用类似于setter的方法，设置各个参数，最后，客户端调用无参的build方法生成对象
public class NutritionFacts {
	private final int servingSize;
	private final int servings;
	private final int calories;
	private fianl int fat;
	private final int sodium;
	private final int carbohydrate;

	public static class Builder {
		//Required params
		private final int servingSize;
		private final int servings;

		//optional params
		private final int calories;
		private fianl int fat;
		private final int sodium;
		private final int carbohydrate;

		public Builder(int servingSize, int servings) {
			this.servingSiZe = servingSize;
			this.servings = servings;
		}

		public Builder calories(int val) {
			calories = val;
			return this;
		}
		public Builder fat(int val) {
			fat = val;
			return this;
		}
		public Builder carbohydrate(int val) {
			carbohydrate = val;
			return this;
		}
		public Builder sodium(int val) {
			sodium = val;
			return this;
		}

		public NutritionFacts build() {
			return new NutritionFacts(this);
		}
	}

	private NutritionFacts(Builder builder) {
		servingSize = builder.servingSize;
		servings = builder.servings;
		calories = builder.calories;
		fat = builder.fat;
		sodium = builder.sodium;
		carbohydrate = builder.carbohydrate;
	}
}

builder的setter方法返回builder本身，这样就可以链接调用
NutritionFacts coke = new NutritionFacts.Builder(240, 8).
	calories(100).sodium(35).carbohydrate(27).build();

这样客户端易于阅读，编写，builder模拟了用名字选择参数，类似python的reboot=false

设置参数的builder就是一个很好的抽象工厂，客户端把这个builder当作方法的参数，这个方法就能够为客户端创建一个或者多个对象，但首先需要有个泛型来表示builder的类型
public inerface Builder<T> {
	public T build();
}

Tree buildTree(Builder<? extends Node> nodeBuilder) {...}
nodeBuilder实现了Builder，这个Builder可以set各个参数，而且有build函数返回实例，即负责产生类的对象并返回，客户端只需要调用即可，其实就是一个工厂，而且基于接口和泛型，支持多种类型的构建，就是抽象工厂，比如可以生产任何继承自Node的子类的对象

总结：如果类的构造器或静态工厂中具有多个参数，用Builder模式（更易读，更易写，更安全），比如http包头，soap包头，这些都有很多可选的参数，这也是citrus中构造协议包头部分用了很多Builder的原因（可以看citrus的源码，更深入了解Builder模式）


第三条， 用私有构造器或者枚举类型强化Singleton属性
单例模式的实现
方法1： public static final
public class Elvis {
	public static final Elvis INSTANCE = new Elvis(); //公有静态final类型的Instance来实现单例模式
	private Elvis() {...}

	public void leaveTheBuilding() { ... }
}
通过反射调用私有构造器可能会产生多个对象，这个方法不是最佳

方法2： 静态工厂方法
public class Elvis{
	private static final Elvis INSTANCE = new Elvis();
	private Elvis() {...}
	public static Elvis getInstance() { return INSTANCE; } //静态方法返回

	public void leaveTheBuilding() { ... }
}
与方法1的区别就是返回单例用的是getInstance，单例本身是private，优势是：与第一条静态工厂方法的优势一样，即不用构造器而用静态工厂方法

方法3： 单个元素的枚举类型
public enum Elvis {
	INSTANCE;

	public void leaveTheBuilding() {...}
}
更简洁
总结：其实个人认为第二个方法最好，最常规，容易记，第三个方法虽然简单，但是有些偏，还是用正常的东西最好


第四条， 通过私有构造器强化不可实例化
有的类不需要实例化，比如各种工具类，直接classname.method就行，不需要new出来
创建不可实例化的类
public class Utility {
//这里加注释解释下为什么不可实例化，不然看起来就很费解
	private Utility() {
		throw new AssertionError();
	}
	...
}
通过声明一个private的构造函数来加强不可实例化的类


第五条， 避免创建不必要的对象
用静态尽量不用重复new，用基本类型，如int，尽量不用装箱类型，如Integer

String s = new String("abc"); //DOＮ'Ｔ　ＤＯ　ＴＨＩＳ
每次都新建一个String

String s = "abc"; //正确

//重复创建对象，耗费资源，不可用
public class Person {
	private final Date birthDate;

//每次都新建Calendar，TimeZone，效率低
	public boolean isBabyBoomer() {
		Calendar gmtCal = Calendar.getInstance(TimeZone.getTimeZone("GMT"));
		gmtCal.set(1946, Calendar.JANUARY, 1, 0, 0, 0);
		Date boomStart = gmtCal.getTime();
		gmtCal.set(1965, Calendar.JANUARY, 1, 0, 0, 0);
		Date boomEnd = gmtCal.getTime();
		return birthDate.compareTo(boomStart) >= 0 &&
				birthDate.compareTo(booEnd) < 0
	}
}

//高效正确版本
Class Person {
	private final Date birthDate;

//静态一般用大写和下划线，这点要注意
	private static final Date BOOM_START;
	private static final Date BOOM_END;

//注意，static还可修饰代码块
	static {
		Calendar gmtCal = Calendar.getInstance(TimeZone.getTimeZone("GMT"));//第一条，静态工厂方法
		gmtCal.set(1946, Calendar.JANUARY, 1, 0, 0, 0);
		BOOM_START = gmtCal.getTime();
		gmtCal.set(1965, Calendar.JANUARY, 1, 0, 0, 0);
		BOOM_END = gmtCal.getTime();
	}

	public boolean isBabyBoomer() {
			return birthDate.compareTo(BOOM_START) >= 0 &&
			birthDate.compareTo(BOOM_END) < 0
	}
}
一个类可以使用不包含在任何方法体中的静态代码块，当类被载入时，静态代码块被执行，且只被执行一次，静态块常用来执行类属性的初始化。例如：
static {...}
改进后只是在初始化时创建Calendar，TimeZone等

适配器是指一个对象，它把功能委托给一个backing object，而为backing object提供一个可替代的接口，针对特定对象的适配器，没必要创建多个
比如Map的接口keySet方法返回Map对象的Set视图，其中包含Map中所有的key，看起来好像每次调用keySet都会返回一个新建的Set实例，但其实对一个给定的Map对象，每次调用keySet都返回同样的Set实例，当其中一个返回对象发生改变，其他的返回对象也要变化

自动装箱时基本类型和装箱类型自动转换，比如long和Long
public static void main(String args) {
	Long sum = 0;
	for(long i=0; i<max; i++) {
		sum += i;
	}
}
因为是Long，所以每个循环都会新建一个Long的对象
优先使用基本类型


第六条，消除过期对象的引用
如果对象的引用没有被清除，则可能引起内存泄露，内存泄露会导致运行缓慢，甚至OutOfMemoryError

public class Stack {
	private Object[] elements;
	private int size = 0;
	private static final int DEFAULT_INITIAL_CAPACITY = 10;

	public Stack() {
		elements = new Object[];
	}

	public void push(Object e) {
		ensureCapacity();
		elements[size++] = e;
	}

	public Object pop() {
		if (size == 0) {
			throw new EmptyException();
		}
		return elements[--size]; //这里引用并没有清空，虽然弹出了
	}

	private void ensureCapacity() {
		if (elements.length == size)
			elements = Arrays.copyOf(elements, 2*size + 1); //检查栈空间，不够就加倍
	}
}
程序可以运行，但长时间运行会导致内存泄露
//清除弹出的元素引用
public Object pop() {
	if (size == 0)
		throw new EmptyException();
	Object result = elements[--size];
	elements[size] = null; //清空元素引用
	return result;
}

如果是自己管理的内存部分，比如自己申请的栈，就要注意内存泄露，解决方案就是清空引用

内存泄露的另一个主要来源是缓存，放入后忘记，可以用WeakHashMap，WeakHashMap，此种Map的特点是，当除了自身有对key的引用外，此key没有其他引用那么此map会自动丢弃此值
还有就是注册的监听和回调，没有注销监听


第七条，避免使用终结方法
不要使用默认的finalizer，收尾:每个类都有一个特殊的方法finalizer，它不能被直接调用，而被JVM在适当的时候调用，通常用来处理一些清理资源的工作，因此称为收尾机制，因为finalizer的的缺点在于不能保证会及时的执行，因为JVM会延迟执行终结方法，导致大量有限资源不能释放，比如数据库session；还有一点终结方法很消耗资源，比创建慢400多倍；还有可能引用没有释放掉，导致垃圾回收没有回收这个对象，资源无法释放
正确的做法是：
1. try-finally结构，在finally里调用终止方法
Foo foo = new Foo(...);
try{
	...
} finally {
	foo.terminate() //比如io.close
}
这样做可以防止前面忘记调用终止方法，finally可以保障关闭（FileInputStream，FileOutputStream，Timer，Connection）
还有一点要注意，如果子类覆盖了父类的finalize方法，则需要显示调用，否则父类终结方法不会被调用
@Override
protected void finalize() throws Throwable {
	try{
		...
	} finally {
		super.finalize();
	}
}
如果都没有重写过finalize方法就没必要显示调用了
注解：基本上可以说，不要让类自己释放那些有限资源，比如io，要在finally里显式调用，如果有重写过finalize方法，需super（一般不会重写）



第三章: 对于所有对象都通用的方法
第八条，覆盖equals时请遵守通用约定
一般不要覆盖equals，因为可能会导致很严重的错误，但类具有自己独特的相等概念就需要覆盖equals
约定：
自反性：任何非null引用x，x.equals(x)返回true
对称性：任何非null引用值x和y，y.equals(x)为true，则x.equals(y)为true
传递性：任何非null引用值x，y，z，如果x.equals(y)为true,y.equals(z)为true,则x.equals(z)为true
一致性：任何非null引用值x和y，多次调用x.equals(y)都会返回true

equals方法编写诀窍：
1. 使用==检查参数是否为这个对象的引用，如果是返回true（这个应该是对应第一条，自反性）
2. 使用instanceof坚持参数是否为正确类型
if(!(o instanceof MyType))
	return false;
3. 把参数转换成正确类型，因为进行过instanceof，所以能转换成功
4. 对于类的每个关键变量，检查参数中的是否和对象中的相匹配

由于第1条规定了自反性，所以编写好之后看是否对称，传递，一致
还有覆盖equals总要覆盖hashCode，不要让equals过于复杂，容易出错，简洁些；不要把equals声明中的Object对象替换为其他类型，如：
public boolean equals(MyType o) {
	...
}
这个方法没有覆盖Object.equals，因为参数不是Object，它只是重载了Object.equals方法，所以用Override
@Override
public boolean equals(MyType o){
	...
}
（注解：正因为传进来的是Object，所以才需要instanceof还有转换）


第九条，覆盖equals时总要覆盖hashCode
如果没有覆盖hashCode method，则HashMap，Hashtable之类都不用
相等的对象必须有相等的HashCode
按照第八条写的equals
@Override 
public boolean equals(Object o) {
	if(o == this)
		return true;
	if(!(o instanceof PhoneNumber))
		return false;
	PhoneNumber pn = (PhoneNumber)o;
	return pn.lineNumber == lineNumber
		&& pn.prefix == prefix
		&& pn.areaCode == areaCode;
}

然后HashMap保存
Map<PhoneNumber, String> m = new HashMap<PhoneNumber, String>();
m.put(new PhoneNumber(707,867,5397),"jenny");
用m.get（new PhoneNumber(707,867,5397)）取的时候返回null，而不是jenny，
因为没有PhoneNumber类没有覆盖HashCode方法，导致两个相等实例具有不同HashCode，所以put方法把对象放到一个Hash bucket里，取的时候又到另一个Hash bucket里

@Override
public int hashCode() {return 11;}
上面函数一定能工作，但没有意义，因为把所有都放到11号hash bucket中，导致哈希变成列表，效率低
一般写hash用result = 31*result + c
@Override
public int hashCode() {
	int result = 17;
	result = 31*result + areaCode;
	result = 31*result + prefix;
	result = 31*result + lineNumber;
	return result;
}

有的计算散列开销大，而且类不变时可以考虑把hashCode放到类中，每次到hashCode第一次被调用时才会加载，用volatitle
private volatile int hashCode; //Lazyliy initialize

@Override
public int hashCode() {
	int result = hashCode;
	if (result == 0) {
		result = 31*result + areaCode;
		result = 31*result + prefix;
		result = 31*result + lineNumber;
		hashCode = result;
	}
	return result;
}


第十条，始终要覆盖toString
好的toString可以让类用起来更方便， toString返回对象中包含的所有值得关注的信息
@Override public String toString() {
	return String.formate("(%03d) %03d-%04d".
							areaCode, prefix, lineNumber);
}


第十一条， 谨慎覆盖clone
Object的clone方法是protected的，如果不用反射，就不能仅仅因为实现了Cloneable就调用clone方法，因为不能保证对象拥有一个可访问的clone方法
clone方法用于深拷贝
方法1： 调用super.clone,然后递归地深拷贝每个元素
每个实现了Cloneable接口的类都要有一个公有方法覆盖clone，这个公有方法先调用super.clone，然后对每个元素递归clone
@Override public HashTable clone() {
	try {
		HashTable result = (HashTable)super.clone();
		result.buckets = new Entry[buckets.length];
		for(int i=0; i<buckets.length; i++)
			if (result.buckets[i]!=null) {
				result.buckets[i] = buckets[i].deepCopy(); //deepCopy是新建一个对象，然后把原来对象的值放到构造函数里构造出新对象
			}
			return result;
	} catch (CloneNotSupportedException e) {
		throw xxx
	}
}

方法2： 先调用super.clone，再把结果对象中的所有的item都设置为空白，调用构造方法来生成新的对象，然后再put，这样比较清楚，但这样没有递归调用clone效率高

方法3： 拷贝构造器
public static Yun newInstance(Yun yun);
完全根据各个值new出一个新的，比clone方法有优势，风险低，不必遵守很多既定的规范，不会有一些异常发生

注解：Cloneable有很多问题，clone方法坑也很多，尽量不要用，如果费用不可，就用方法2或方法3，用new的方式，而不要用递归clone，因为有风险，可能有Exception


第十二条， 考虑实现Comparable接口
实现Comparable接口的类，可以用集合的方法，比如sort
public final class CaseInsensitiveString
	implements Comparable<CaseInsensitiveString> { //实现Comparable接口，而且泛型写法要注意
	public int compareTo(CaseInsensitiveString cis) { //compareTo函数，参数是要比较的类本身，而不是Object
		return String.CASE_INSENSITIVE_ORDER.compare(s, cis.s); //<0小于，>0大于，0等于
	}
}



第四章：类和接口
第十三条， 使类和成员的可访问性最小化
良好的模块会隐藏所有实现细节，隔离API与具体实现，模块之间只通过API通信，解除模块间的耦合，可以独立开发，测试，修改
有公有API后，几乎所有成员变量都该是私有，除非当同一个包内另一个类需要访问一个成员，则删除private变为包级别私有
注解：尽量降低可访问性，除了公有静态final外，公有类不应该有public的成员变量，而且static final引用对象要不可变，主要是为了防止模块之间的依赖，如果public成员变量，类之间的耦合就会增加


第十四条， 在公有类中使用访问方法而非公有变量
就是用get方法，set方法，而不是用public成员变量，但如果不是public类，是包级别私有或嵌套类，则public成员变量没有本质错误


第十五条， 使可变性最小化
为了使类不可变，或尽量少变化，需要遵循的原则：
1. 不提供任何修改对象状态的方法（如set方法）
2. 保证类不会扩展（生命为final）
3. 多用final
4. 非final的是private
5. 可变组件互斥访问
注解：有些类可能需要这个，比如String，BigDecimal等


第十六条， 复合比继承优先
跨包继承打破了封装性，子类依赖于父类中特定的细节，厄尔父类实现可能会随着版本变化，这样子类会有问题，除非父类是专门为扩展设计的，比如Base类
复合has a，继承is a
class Car extends Veicle{ //继承
	private Wheel w; //复合
	private Engine e;
}
决定使用继承而不是复合之前，应该问一个问题，你继承的类，它的API有没有缺陷？继承会把超类API中的问题传播到子类中，复合则会允许新API隐藏缺陷
总结：继承很强大，但也存在问题。继承违背了封装原则，只有父类和子类之间确实存在类型关系时，继承可用，但父类和子类处于不同包中，而且父类不是为继承设计的，这种继承就很容易有问题，需用复合来，尤其有接口可以实现包装类时


第十七条， 为继承而设计，提供文档说明，否则就不用继承
原因和第十六条类似，比如测试中Base类就属于为继承而设计，这时就需要有很详细的文档注释


第十八条， 接口由于抽象类
Java只允许单继承，很大程度限制了抽象类，接口可以实现多个；但抽象类有个优势：如果后续版本中增加新方法，可以有默认实现，子类直接继承用就行，而接口就不行
最佳实践：用抽象类实现接口，Override公用的method，这样既可以让子类继承默认实现，也可以抽象类实现多个接口

//这种实现叫做Skeletal实现，必须有详细的注解，因为这是抽象类所需要有的
public abstract class AbstractMapEntry<K,V>
	implements Map.Entry<K,V> {
	public abstract K getKey();
	public abstract V getValue();

	public V setValue(V value) { //所有子类必须重写这个方法，否则根本无法存值
		throw new UnsupportedOperationException();
	}

	@Override
	public boolean equals(Object o) { //注意equals的写法，三个步骤，== instanceof Object类型强制转换
		if(o == this)
			return false;
		if(!(o instanceof Map.Entry))
			return false;
		Map.Entry<?,?> arg = (Map.Entry) o;
		return equals(getKey(), arg.getkey() &&
				equals(getValue(), arg.getValue());
	}
	private static boolean equals(Object o1, Object o2) {
		return o1 == null ? o2 == null : o1.equals(o2);
	}

	@Ovveride
	public int hashCode() {
		return hashCode(getKey() ^ hashCode(getValue());
	}
	private static int hashCode(Object obj) {
		return obj == null ? 0 : obj.hashCode();
	}
}
注意上面这个实现，equals，hashCode，挑最常用的方法在抽象类中实现，子类可直接用，而抽象类又实现接口，实现接口优势和抽象类优势合并
总结：接口通常是定义允许多个实现类型的最佳途径。这条规则有个例外，当演变的容易性比灵活性和功能更重要的时候，这时应使用抽象类来定义类型。如果导出一个重要接口，就坚决考虑提供Skeletal实现，最后谨慎设计公有接口，并通过编写多个实现来全面测试


第十九条， 接口只用于定义类型
类实现接口，接口就充当可以引用这个类的实例的类型，其他都不是接口的功能，比如各种纯常量接口，接口只定义常量，如果仅是常量则用枚举类


第二十条， 类层次优于标签类
标签就是一个类有多个类型的构造函数，可以构造多个类似于子类的对象，这时就需拆开成子类，总之，明确的继承关系优先使用

//不要这么做，不清晰，如果一个类包含多个类型，就可以拆成子类，明确的继承关系可以使用继承，只有在跨包不为继承关系时才建议复合
class Figure {
	enum Shap {  RECTANGLE, CIRCLE };
//only for rectangle
	double length;
	double width;

	double radius; //only for circle

	Figure(double radius){...}
	Figure(double length, double width) {...}
	double area() {...}
	...
}

//应该这样做
abstract class Figure {
	abstract double area();
}

class Circle extends Figure {
	final double radius;
	Circle(double radius) {this.radius = radius;}
	double area() { return Math.PI * (radius * radius); }
}
class Rectangle extends Figure {
	final double length;
	final double width;
	Rectangle(doule length, doulbe width) {
		this.length = length;
		this.width = width;
	}
	double area() { return length * width; }
}
注解：有明确继承的类就可以使用继承，如果多个类有共同点，可以弄一个父类，最好是abstract，不要把类弄得很大，负责很多，职责明确，太多就拆分，既易读，又省内存，效率高


第二十一条， 用函数对象表示策略
Java没有函数指针，但可以用对象引用实现同样的功能。定义这样一个对象，它的方法执行其他对象（从参数传入）上的操作，如果一个类仅仅导出这样一个方法，其实例时机就等于一个指向该方法的指针，这种实例被称为函数对象
class StringLengthComparator {
	public int compare(String s1, String s2) {
		return s1.length() - s2.length();
	}
}
StringLengthComparator是字符串比较操作的具体策略
作为具体策略类，StringLengthComparator是无状态，所有实例在功能上对等，所以单例模式就很适用
class StringLengthComparator() {
	//private构造函数，单例模式
	private StringLengthComparator() {}
	public static final StringLengthComparator() INSTANCE = new StringLengthComparator();
	public int compare(String s1, String s2) {
		return s1.length -s2.length();
	}
}
如果把StringLengthComparator的实例传给方法则对参数有要求，需要定义一个Comparator接口，StringLengthComparator来实现这个接口，就是说在设计具体策略类时，需要定义一个策略接口
//策略接口
public interface Comparator<T> {
	public int compare(T t1, T t2);
}

class StringLengthComparator implements Comparator<String> {
	//和上面一样，单例构造模式
}

很多时候策略类会用匿名类，如
Arrays.sort(stringArray, new Comparator<String>() {
	public int compare(String s1, String s2) {
		return s1.length() - s2.length();
	}
});//匿名类每次执行都会新建
所以如果重复执行，可以存到一个private static final，这样就可重用了
由于策略接口用作所有策略类的类型，所以策略类不需要是public，通过宿主类导出静态变量或静态方法，可以实现重用,String的CASE_INSENSITIVE_ORDER就是这个原理
//宿主类
class Host {
	private static class StrlenCmp implements Comparator<String>, Serializable {
		public int compare(String s1, String s2) {
			return s1.length() - s2.length();
		}
	}

	//静态变量为策略
	public static final Comparator<String> STRING_LENGTH_COMPARATOR = new StrLenCmp();
	...
}
Array.sort(array, Host.STRING_LENGTH_COMPARATOR)
注解：函数指针主要是为了实现策略模式，就是自定义策略，java中用一个接口表示策略，每个策略声明一个类实现接口，如果策略只用一次则直接用匿名类来实例化，就是把匿名类当做参数传给排序函数之类，如果重复使用，就像String里的CASE_INSENSITIVE_ORDER，那就要实现为private static class Policy,通过public static final XXX = new Policy() 来表示


第二十二条， 优先考虑静态成员类
定义在一个类内部的类，叫作“嵌套类”。嵌套类分为两种：static的和非static的。后者又有一个专门的名字，叫作“内部类” 内部类有非静态成员类，匿名类，局部类
public class outerTolocal{

class local{

//此类为局部类局部类不需要加public 修饰符，应为这方法执行完 这类就消失了
局部变量前面是不可以加权限控制符的，也不能用static修饰。但是可以用final修饰，用来确保这个变量的值不会发生改变。所以如果局部类要访问带修饰的局部变量，只能访问用final修饰的局部变量。但是局部类可以访问外部类的所有成员，包括成员变量。

忘记给你提一点了。局部类只能访问其所在方法中带final关键字的局部变量。
}
}
局部类比较少用，了解

静态成员类是最简单的嵌套类，基本可以看做普通类，只是生命在内部而已，它可以访问外面类的所有成员，静态成员类与静态成员变量等级，访问方法也类似，静态成员类常见用法是辅助类，比如上面StrlenCmp类，调用Host.STRING_LENGTH_COMPARATOR，还有Entry在HashMap中的声明为static class Entry<K,V> implements Map.Entry<K,V>，虽然它声明在HashMap内，但是因为声明为static，对我们而言它就是外部类了，如果要用HashMap中的Entry的话，直接Entry就可以了，不能HashMap.Entry，而在Map中，Entry的声明为interface Entry<K,V>，他是内部接口，用的话必须得Map.Entry来使用。 

非静态成员类实例可以调用外面类实例的方法，它不能单独存在，必须依赖于外面类的实例，常见用法是一个Adapter，如iterator
public class MySet<E> extends AbstractSet<E> {
	...

	public Iterator<E> iterator() {
		return new MyIterator();
	}

	private class MyIterator implements Iterator<E> {
	...
	}
}
上面类的用法就是把MyIterator非静态成员类实现自定义的迭代器，这个迭代器可以访问外面的成员变量，而且依附于外面类生成的实例存在，与外面类实例关联，这时就需用非静态成员变量类

如果成员类不需要访问外面类的实例，则要使用静态成员类

匿名类不是外面类的一个成员，声明同时实例化，用于动态创建函数对象，Array.sort(array, new Comparble{...})

局部类用的少

总结：如果成员类的每个实例都需要一个指向外面实例的引用，就需要非静态，否则就静态，如果嵌套类属于某个方法内部，而且只需要在一个地方创建实例，则用匿名类，其他情况局部类，一般不怎么用局部类



第5章 泛型
第二十三条，不要再新代码中用原生态类型
每个泛型都有一个原生态（raw）类型，List<E>原生态类型List，原生态类型失去泛型在安全和表达方面的优势
List list;
list.add(new xxx)//任意类型
有风险，比如java.util.Date实例放入到java.sql.Date的list中，编译时不报错，如果用泛型
List<String> list= new ArrayList<String>();
则list.add(0)//报错，类型不匹配

如果需要匹配任意对象则可以List<Object>，和原生态类型区别前者告诉编译器可以接受任何类型，后者干脆什么都没告诉编译器，如果把List<String>类型放入List<Object>出错，泛型子类化规则，List<String>是List的一个子类型，不是List<Object>子类型

public static void main(String[] args) {
	List<String> strings = new ArrayList<String>();
	unsafeAdd(strings, new Integer(42));
	String s - strings.get(0);
}
static void unsafeAdd(List list, Object o) {//List参数，不是List<String>
	list.add(o);
}
程序可以编译，运行时报错，这样有风险

把unsafeAdd参数改成List<Object>则编译时就会出错
如果用List这样的原生态类型，则会失掉安全性，如果用List<Object>则不会

无限制的通配符?，List<?>不确定或不关心参数类型

例外，类文字中需要用原生态类型，List.class,但List<?>.class不合法
还有在instanceof需要原生态类型
if (o instanceof Set) {
	Set<?> m = (Set<?>) o; //如果是马上转换 
}
总结：原生态类型运行时有风险，Set<Object>是个参数化类型，可以包含任何对象类型的一个集合，Set<?>通配符类型，只能包含某种未知对象的一个集合；Set是原生态集合，脱离泛型，不安全。
其实<String>,<Object>,<?>逐层递减限制，不过都告诉编译器范围，Set什么都没告诉编译器，不安全，不要用，但在class和istanceof中可以用


第二十四条， 消除unchecked warning
尽量消除每个warning，因为有一定道理给warning，如果确实没法消除则用@SuppressWarnings("unchecked")，但要有注释说明原因


第二十五条， 列表优先于数组
Object[] objectArray = new Long[1];
objectArray[0] = "abc"//运行时抛出异常

List<Object> o = new ArrayList<Long>();//不能编译

注意数组有父类子类关系，泛型没有，List<Object>不是List<Long>的父类
数组在运行时才会检查元素类型，泛型通过擦除来实现，泛型只是在编译时规定类型，运行时丢弃类型，就是说运行时没有泛型，泛型只是编译时为了安全和表述增加的
注解：泛型用List，别用数组


第二十六条， 优先考虑泛型
泛型更安全，易读，还可以声明为
class DelayQueue<E extends Delayed> implements BlockingQueue<E>;
public class Stack<E> {
	public void push(E e) {
	...
	}

	public E pop() {
		...
	} 
}
注意泛型的声明
注解：直接用集合泛型就好，写泛型有坑，不要轻易用，知道泛型的声明方法就行


第二十七条，优先考虑泛型方法
理由类似二十六，个人认为泛型一般用于存储某些类的时候用，而java提供的集合就够用了，不怎么需要自己开发，尽量不要自己写泛型


第二十八条， 用有限通配符提高API灵活性
Iterator<? extends T> i = list.iterator(); //任何T的子类，Iterator
<? super T>
如果参数化类型表示一个T生产者，用<? extends T>;如果参数化类型表示一个T消费者，则用<? super T>，
弄不清生产者消费者，就直接考虑需要用的参数是子类合适还是父类合适，是向上兼容或向下兼容
Stack popAll的参数通过Stack消费E，则用Collection<? super E>,push生产则用<? extends T>,这个比单纯E，T灵活
注解：发布公用API一般都要用?


第二十九条， 优先考虑类型安全的异构容器
基本思路是把类型参数放在键上而不是Map上，自己创建一个新的容器，Class为键，Class<T> t,打破规定类型的限制，不怎么明白，不要用这个，知道就好了



第6章： 枚举和注解
第三十条， 用enum代替int常量
public static final int APPLE_FUJI = 0;
public static final int APPLE_PIPPIN = 1;

public static final int ORANGE_NAVEL = 0;
public static final int ORANGE_TMEPLE = 1;
上面的声明就是int常量，这种做法有提示和安全方面问题，如果把APPLE赋给ORANGE不会出错，APPLE == ORANGE也不会提示

枚举类型是final，客户端既不能创建枚举类型的实例，也不能对它重写，它们是单例的，泛型的，安全的，因为编译器会检查，如果不属于枚举之内的会报错
public enum Apple { FUJI, PIPPIN }
public enum Orange{ NAVEL, TEMPLE, BLOOD }

枚举类型还允许添加方法，枚举类型不可变，其成员为final

//计算星球属性,注意枚举可以是括号括起来的，里面每个item，在调用构造函数时会自动装填
public enum Planet {
	EARTH(5.975e+24, 6.378e6), //逗号
	MARS(6.419e+23, 3.393e6); //分号

	private final double mass; //声明为private final，有public的方法来返回
	private final double radius;
	private final double surfaceGravity;

	private static final double G = 6.67300E-11;

	Planet(double mass, double radius) {
		this.mass = mass;
		this.radius = radius;
		surfaceGravity = G * mass / (radius * radius);
	}

//public方法返回各项成员变量值
	public double mass() {return mass;}
	public double radius() {return radius;}
	public double surfaceGravity() {return surfaceGravity;}

	public double surfaceWeight(double mass) {
		return mass * surfaceGravity;
	}
}

public static void main(String[] args) {
	double earthWeight = Double.parseDouble(args[0]);
	double mass = earthWeight / Planet.EARTH.surfaceGravity(); //调用构造函数.返回EARTH.返回具体EARTH参数
	for (Planet p : Planet:values()) { //注意values可以直接返回各个枚举，for循环:即可
		System.out.println(p, p.surfaceWeight(mass));
	}
}

枚举类可以为顶层类的成员类，用于各种常量操作表达，比直接static final xxx更好，易复用，更清晰，更强大，可编写各种函数，独立解耦

//抽象方法多个枚举
public enum Operation {
//这两个是枚举的具体item，不是枚举类，虽然有函数，可以说是类枚举，枚举item是类，不是常量
	PLUS { double apply(double x, double y) {return x+y;} } 
	MINUS { double apply(double x, double y) {return x-y;} }

	abstract double apply(double x, double y); //这里的抽象方法，在其他内部枚举中必须实现

	private final String symbol;
	Operation(String symbol) { this.symbol = symbol; } //构造
	@Override public String toString() {return symbol;} //toString常用，注意返回自定义的描述
}

public staic void main(String[] args) {
	double x = xxx;
	double y = xxx;
	for (Operation p : Operation.values())
		system.out.printf(x, p, y, p.apply(x,y));//p打印toString的结果
}

枚举内部还可以枚举
emum PayrollDay {
	xxx

	private enum Pay {
		xxx
	}
}

总结： 枚举更安全，强大，可编写函数操作各项，包括抽象的非抽象的，如果常量很多可以考虑放到枚举类中统一操控，比放到类中要好，放到类中比较乱，而且如果在多个地方用的话，可能不如放到枚举中易读，安全，灵活


第三十一条， 用实例代替序数
ordinal方法可返回枚举类型具体item的位置，类似于下标，但不要用，因为排序后会破坏，绝对不要根据枚举的序数ordinal来导出相关值，而是要保存在一个实例
public enum Music {
	SOLO(1), DUET(2), NONET(9); //各种乐队需要的人数
	private final int number; 
	Music(int size) { this.number = size;} //注意这个自动装填，枚举括号里和这个有mapping关系， Music.SOLO,size自动为1
	public int numberOfMusic() {return number;}
}


第三十二 第三十三条， 用EnumSet， EnumMap，不太可能用到，基本意思是EnumSet等是类似Map，set，不过存的是Enum，用这个，不要用ordinal
第三十四条， 枚举类implements Interface，实现动态扩展，不过基本不会用，枚举就是不变的情况下用的，如果动态扩展的话就不要用枚举了，而且就算扩展了，修改枚举类就行，没必要非要写个接口来增加复杂度


第三十五条， 优先使用注解
Junit里@Test, 
@Override
注解简单而且安全，优先考虑注解，包括Spring里很多注解可以简化xml


第三十六条， 使用Override，这个不用说了，很重要


第三十七条， 用标记接口定义类型，基本意思是接口用于标记类型，如果要定义类型就一定用接口



第7章 方法
第三十八条， 检查参数的有效性
方法尤其是构造方法必须检查有效性，如果参数非法，可能会在后面抛出各种异常，而且难以debug，保持写下面这样注释的习惯,尤其是通用的方法
/**
 *这个方法的功能
 *
 *@param 参数的意义和有效性，比如，数组长度必须大于零
 *@return 返回什么
 *@throws xxxException if xxx
 */
 public BigInteger mod(BigInteger b) {
 	ifxxx
 }
 非公有方法用assert
 private static void sort(xxx) {
 	assert xxx != null;
 	assert a > 0 && b < 0;
 }


 第三十九条， 必要时进行保护拷贝，基本意思是为避免安全问题，可以用clone深拷贝出一份操作，但性能会低一些


 第四十条， API设计技巧总结
 谨慎选择方法名称：方法命名要易于理解，并且和同一包中的其他方法命名规则类似

 不要过于追求提供便利的方法，接口设计不要太多方法，否则实现者的就会复杂，难以使用，测试，维护。一项操作特别常用，可以考虑提供便利快捷的方法，否则还是不提供的为好，不要让接口过于庞大，方法太多

 避免过长的参数列表，最多四个，太多根本记不住出错概率大大增加，尤其是顺序弄错。
 有三种方法避免过长参数
 第一种方法：把方法拆成多个方法，但这样可能导致方法过多，可以通过正交减少方法，比如List接口中没有在子列表中查找第一个和最后一个的方法，因为都需要第三个参数，提供subList(),结合indexOf就可以实现，总之就是如果类中有可以实现的方法，就没必要设计太多
 第二种方法：创建辅助类，辅助类来存各种参数，一般为静态成员类，如果参数之间有逻辑关系，就可以设计成一个参数类，比如扑克牌的各个花色
 第三种方法：Builder，定义一个对象表示所有参数，然后调用多个setter，相当于前两种的集合

 参数类型优先使用接口，这样可以传入更多类型

 可以考虑用只有两种类型的枚举代替boolean，比如
 public enum Temperature { FAHENHEIT, CELSISUS }
 Thermometer.newInstance(true)//可读性不好
 Thermometer.newInstance(Temperature.FAHENHEIT)//易读


第四十一条，慎用重载 
重载务必要避免参数经过转化就可以用另一个的情况，因为这时很有可能会调错方法。
对于多个具有相同参数数目的方法来说，尽量避免重载（不要有两个具有相同参数数目的重载方法），不过构造函数很难做到这一点，那么至少避免这样的情形：同一组参数只要经过类型转化就能传递给不同重载方法，如果这个也不能保证，比如改造一个现有类实现新接口，那就传递同样参数时，所有重载方法的行为一致
注：其实主要是前两条，如果是普通方法压根就不要提供相同数目的重载方法，如果是构造函数则不要提供经过类型转换就能用的方法


第42条， 慎用可变参数
static int sum(int... arg) { //...是可变的参数，参数长度不一定
	int sum = 0;
	for (int arg : args)
		sum += arg;
	return sum;
}

一个或多个
static int min(int ...arg){...} //这种方法的问题是如果没有传入参数则在编译时不会报错，而是运行时
解决方法：
static int min(int arg, int ...following) {...}
注解：参数个数不确定可以用，但不要乱用，也可以说能不用就不用，非要用注意如果没参数的处理


第四十三条， 返回零长度集合而不是null
返回类型为Set，Map之类，不要返null，因为调用者可能会忘了判空导致错误，这种C的做法在Java不可取
返回长度为0的集合根本不会影响性能，因为可以忽略不计但可避免大量的判空和Nullexception
正确写法：
public List<Cheese> getCheeseList() {
	if (cheeseInStock.isEmpty())
		return Collections.emptyList(); //正确做法，这样客户端就可以直接arrayList.contains(xxx)，不必担心arrayList为空

}


第四十四条， 为所有导出的API元素编写文档注释（没注释的函数根本不能算API，尤其是常用的，按javadoc格式编写，可自动生成文档）
/**
 *这个方法的功能
 *
 *@param 参数的意义和有效性，比如，数组长度必须大于零
 *@return 返回什么
 *@throws xxxException if xxx
 */



第8章： 通用程序设计
第四十五条， 将局部变量的作用域最小化
C语言必须在开头声明，这种做法在Java中必须改掉，java允许在任何地方声明，最有力的方法就是在第一次使用它的地方声明让局部变量的作用域最小化。
每个局部变量的声明都要初始化，避免int n；
for(int i=0, n = xxx.get; i<n; i++) //简洁高效，注意i n之间逗号


第四十六条， for-each优先
for (Item i : ItemColleciton) {
	...
}
优先用这种写法，而不是iterator
：可以循环实现Iterable接口的对象
注解：直接用java提供的类型，List，Map，Set，不要自己弄，否则各种坑，比如Iterable，各种equals，hashCode一大堆，根本得不偿失


第四十七条， 了解和使用类库
注： 别重复造轮子，直接用Java库和第三方库，可以略加封装，不要自己造核心部分，根本弄不好


第四十八条， 精度敏感情况，严禁使用float double
浮点型不精准，比如钱不能用浮点型，浮点型只是接近真实，只能用于不敏感的时候
0.06 + 0.01 = 0.06999999999999999，由于浮点计算的方法导致
用int，long，BigDecimal计算钱
public class Arith {
/**
 * 提供精确加法计算的add方法
 * @param value1 被加数
 * @param value2 加数
 * @return 两个参数的和
 */
public static double add(double value1,double value2){
BigDecimal b1 = new BigDecimal(Double.valueOf(value1));
BigDecimal b2 = new BigDecimal(Double.valueOf(value2));
return b1.add(b2).doubleValue();
}
/**
 * 提供精确减法运算的sub方法
 * @param value1 被减数
 * @param value2 减数
 * @return 两个参数的差
 */
public static double sub(double value1,double value2){
BigDecimal b1 = new BigDecimal(Double.valueOf(value1));
BigDecimal b2 = new BigDecimal(Double.valueOf(value2));
return b1.subtract(b2).doubleValue();
}
/**
 * 提供精确乘法运算的mul方法
 * @param value1 被乘数
 * @param value2 乘数
 * @return 两个参数的积
 */
public static double mul(double value1,double value2){
BigDecimal b1 = new BigDecimal(Double.valueOf(value1));
BigDecimal b2 = new BigDecimal(Double.valueOf(value2));
return b1.multiply(b2).doubleValue();
}
/**
 * 提供精确的除法运算方法div
 * @param value1 被除数
 * @param value2 除数
 * @param scale 精确范围
 * @return 两个参数的商
 * @throws IllegalAccessException
 */
public static double div(double value1,double value2,int scale) throws IllegalAccessException{
//如果精确范围小于0，抛出异常信息
if(scale<0){ 
  throw new IllegalAccessException("精确度不能小于0");
}
BigDecimal b1 = new BigDecimal(Double.valueOf(value1));
BigDecimal b2 = new BigDecimal(Double.valueOf(value2));
return b1.divide(b2, scale).doubleValue();
}
}
注意BigDecimal需要new，然后不能直接加减乘除而是需要用divide，multiply，subtract等


第四十九条， 基本类型优于装箱类型
int double 基本类型， Integer 装箱类型
在以下情形使用装箱类型：
集合的元素，不如Map<Integer, Long>;参数化类型，ThreadLocal<Integer>;进行反射方法调用
因为上面几种情况必须使用类，装箱类型是类

其他情况尽量用基本类型，因为：
装箱类型的==是比较两个对象是否为同一个对象，不是真正的值相等，只有在装箱类型和基本类型比较java才会自动拆箱
装箱类型有性能问题，尤其在循环中，很容易新建大量临时装箱类型，而且自动拆箱消耗大


第五十条， 如果其他类型合适，那就尽量避免用字符串
这条基本可以不遵守，因为字符串太常用了，其他用不好容易出错


第五十一条， 小心字符串连接的性能
+不适合大量字符串，由于字符串不可变，连接需要拷贝，大量拷贝耗费性能
数目大的字符串用StringBuilder
StringBuilder b = new StringBuilder();//线程不安全
b.append(string);

stringbuffer和StringBuilder用法一样，线程安全


第52条， 通过接口引用对象
Map<String> map = new HashMap<String>();
不仅是返回值，包括类型，参数都要接口声明
Set<String> stringSet = null;
private Set<String> fetchValue() {...}
注解：原因很简单，灵活，兼容


第53条， 接口优先于反射机制
反射通过程序来访问关于已加载类的信息，Class实例可以访问到构造器，方法，成员变量，但是缺点是： 性能低，代码可读性差，无法编译检查
反射很强大对于编写框架可以用（Spring）一般复杂系统常用，不过反射机制最好仅用于实例化对象，访问对象要用接口或者父类
注解： 反射能不用就不用，唯一一个用处就是spring之类的框架，基本可以说可以不用反射，因为有spring框架，不需要自己造轮子，知道原理就行


第54条， 谨慎使用本地方法
Java调用其他程序写的程序，类似exec
注解：本地程序不易可能引入异常，降低性能，只有在不需要性能而且本地已经有程序不想重写，或其他语言有优势java不好写的情况下再用，比如自己用的工具


第五十五条， 谨慎进行优化
如果性能不好先考虑是不是算法不好，底层优化无法弥补算法的消耗，比如返回null之类的看似会省一些资源的做法不可取，不要牺牲可用性，可读性来换取少量微不足道的资源
注解： 中规中矩写就行，不要弄些自己的各种结构，jdk的第三方的都是优化过的，调用即可，最多封装下，不要自己造轮子


第五十六条， 命名要规范
包：com.google.inject
类或接口: Timer,HttpServlet
方法： remove, ensureCap
常量： MIN_VAL
局部变量： i,max,houseLocation
类型参数： T，E,K(这里指泛型中用的参数)



第9章：异常
第五十七条，只针对异常情况使用异常
基本意思是很多时候不要做一些无谓的try catch，只有在可能发生异常的情况用
如线程
try {
	while(running) {
	
	}
}catch(xxxException)
因为线程随时可被终止，所以需要有try catch，如果没有就无法处理异常导致线程状态不可预测

try{
	xxx
} catch (Exception e) {
	f.close();
}
各种文件流关闭也要try catch，如果不用就可能导致无法释放文件读写资源

总之必须用才用，否则就不用，通常来说涉及到资源释放，线程中断后处理，各种中间随时可能有异常的交互就必须用，否则导致资源无法释放，其他情况基本可以不用


第五十八条， 对可恢复的情况使用受检异常，对编程错误使用运行时异常
基本上对一些可预期的异常，比如取钱，但余额不足，这种异常就需要有个方法处理
try{
	atm()
} catch (NotEnoughException e) {
	handleNotEnoughMethod(xxx)
} finally {
	getCard
}

如果是不可预测的错误或调用者错误传参导致的，那就是RuntimeException子类，不要自己定义
try{
	outofMemory
} catch (subRuntimeException) {
	不用写处理函数，因为没什么处理的，直接打印异常原因和函数调用栈即可
}


第五十九条， 避免不必要地使用受检异常
可预测的异常也要适度使用，虽然有用但如果泛滥就会增加使用的难度，各种catch可读性也差

try {
	o.action(arg);
} catch (TheCheckException e) {
	handleIt();
}
如果可以的话，尝试下面的写法，不需要try catch，不会有太多异常
if(obj.actionPermitted(arg)) {
	obj.action(arg);
} else {
	handleit();
}
注解：这种方法在同步中要放在同步块中，因为中间可能改变Permitted的状态


第六十条， 优先使用标准异常
不要自己造异常类，用Java提供的，最常用的如下：
IllegalArgumentException	非null的参数值不正确
IllegalStateException		对于方法调用而言，对象状态不合适
NullPonterException			禁止用null的情况下参数为null
IndexOutOfBoundsExcetpion	下标值越界
ConcurrentModificationException	禁止并发修改，但检测到对象的并发修改
UnsupportedOperationException	对象不支持调用的方法
注解：还有IO的，各种框架比如Spring里的异常，总之不要自己造，直接用就行


第六十一条， 抛出与抽象对应的异常
如果存在函数调用链，底层的异常在上层开来就很奇怪，如果层层上抛，调用者就会误解
最好的做法是，如果这个异常能描述情况而且上层能看懂，就直接抛出，否则就抛出新的异常
try {
	
} catch (LowerLevelException l) {
	throw new HighLevelException(l);
}
注解：这种做法不一定总用，因为现在的框架包装很好，不过有时需要就可以用


第六十二条， 每个方法抛出的异常都要有文档
基本意思是为每个异常在函数的注解中添加@throws，注意这个是可预期的，而不是runtiemerror，每个throws都是checked exception


第六十三条， 在细节消息中包含能捕捉失败的信息
如果自己写异常，需要注意toString，函数调用栈打印需要调用toString，还有更好的构造函数，这样在toString里能打印更详细的信息
public IndexOutOfBoundException(int lowerBound, int upperBound, int index) {
	super("Lower bound: " + lowerBoundxxx);
	this.lowerBound = lowerBound;
	...
}
打印出各个范围，更详细，更易读
注解： 还是不要自己写异常的好，如果非写不可，必须继承自一个成熟的异常，先super，再稍加改造，添加些信息就行，放到toString


第六十四条， 努力使失败保持原子性
比如取钱，余额不足，还剩99，取一百，加入先修改状态，再报异常就会有问题
try {
	balance = balance - 100
} catch (NotEnough) {
	...
}
虽然报失败了，但余额变成了-1

务必记住任何的异常都应该在对象状态改变之前抛出，实在不行就在异常抛出后有恢复代码，再不行就先拷贝一份，异常后马上覆盖

if(balance - 100 >= 0){
	balance = balance - 100;
} else {
	throw Exception
}

try {
	balance = balance - 100
} catch (NotEnough) {
	restore();
}

try {
	tmp = balance
	balance = balance - 100
} catch (NotEnough) {
	balance = tmp;
}

还有就是多线程中需要有好的同步，否则异常而且不容易恢复
注： 最后修改状态很重要，避免很多不必要的失误，或者先备份，失败后再恢复


第六十五条， 不要忽略异常
基本意思是异常不可轻易忽略，如果要忽略，需要打印为什么忽略



第10章：并发
第六十八条， 同步访问共享的可变数据
synchronized可以保证在同一时间只有一个线程执行某代码块或者方法，很多人把它理解为互斥，但这不全面，一方面是互斥，另一方面是如果没有synchronized关键字，这个代码块或者函数在其他线程根本不可见

public class StopThread {
	private static boolean stopRequested;

	public static void main(String[] args) throws InterruptedException {
		Thread backgroundThread = new Thread(new Runnable() {
			public void run() {
				int i = 0;
				while(!stopRequested)
					i++;
			}
		});
		backgroundThread.start();
		stopRequested = true;
	}
}
这个程序会一直运行不能停止，因为stopRequested在主线程做的改变根本无法同步到里面，如果变量名是非同步的，没有volatile，Atomic 那么这个变量根本无法被JMM（java内存模型）识别为线程共享的变量（很重要）

public class StopThread{
	private static boolean stopRequested;
	private static synchronized void requestStop() {
		stopRequested = true;
	}
	private static synchronized void stopRequested() {
		return stopRequested;
	}

	public static void main(String[] args) throws InterruptedException {
		Thread backgroundThread = new Thread(new Runnable() {
			public void run() {
				int i = 0;
				while(!stopRequested)
					i++;
			}
		});
		backgroundThread.start();

		sleep(1);
		requestStop;
	}
}
这个程序也不会停止，因为stopRequested不是volatile或者Atomic， 而且同步方法部分根本没必要同步，因为压根是原子的，没有涉及++,--等有中间值得操作

正确做法：
public class StopThread {
	private static volatile boolean stopRequested;//volatile可以被java内存模型识别，而且保证其他线程可见，但不保证锁

	public static void main(String[] args) throws InterruptedException {
		Thread backgroundThread = new Thread(new Runnable() {
			public void run() {
				int i = 0;
				while(!stopRequested)
					i++;
			}
		});
		backgroundThread.start();
		stopRequested = true;
	}
}

volatile只是保证其他线程可见，并不保证同步，就是在计算过程中随时可能被其他线程修改，只不过当前线程可以读到修改的结果，这期间没有锁，而是通过JMM保证的，volatile只是保证变量多线程可见，同步还得用synchronized，Lock
private static volatile int num = 0;
public static int generateSerialNumber() {
	return num++; //线程不安全，因为++是先加在赋值，中间可能被修改
}
用AtomicLong，保证原子性（注意volatile和Automic的区别，volatile只是保证多个线程可修改，可读到最新的值，并不保证原子性，Automic保证线程可见，保证原子性，一般变量volatile就行，操作的++ , --最好用Atomic）
private static final AtomicLong num = 0;
public staic long number() {
	return num.getAndIncrement(); //注意Atomic的用法，有些类似BigDecimal，需要调用方法来操作
}

注解：注意volatile，Atomic，synchronized，总之就是volatile对多线程可见，Atomic保证可见原子，用于++ --,synchronized用于修改volatile而且可能导致不同步的代码块或函数


第六十七条， 避免过度同步
避免在同步区域内调用其他外部函数，尤其是这个外部函数是类内，对待修改变量可操作的，如：
public class ObserverableSet<E> {
	...
	public void addObserver(SetObserver<E> observer) {
		synchronized(observers) {
			observers.add(observer);
		}
	}
	public boolean removeObserver(SetObserver<E> observer) {
		synchronized(observers) {
			return observers.remove(observer);
		}
	}
	private void notifyElementAdded(E element) {
		synchronized(observers) {
			for (SetObserver<E> observer : observers)
				observer.added(this, element);
		}
	}


}
...
for(int i = 0; i < 100; i++)
	set.add(i); 
可以正常运行
set.addObserver(new SetObserver<Integer>() {
	public void added(xxx) { //重写added
		if（e == 20） s.removeobserver(this); //当加到第二十个就移除掉
	}
});
这个程序会有问题，报ConcurrentModificationException
因为notifyElementAdded调用added时，正处于遍历列表中，第二十个却要移除，synchronized只能防止并发修改，无法防止线程本身里的方法，第一个方法notifyElementAdded有synchronized，第二个方法同样可以获得锁，因为重写后的added方法属于add方法内部，相当于自己修改自己，而且在同步块内部，就会有ConcurrentModificationException

这种方法会导致死锁：
set.addObserver(new SetObserver<Integer>() {
	public void added(xxx) {
		if(e == 23) {
			ExecutorService executor = Executors.newSingleThreadExecutor();
			final SetObserver<Integer> observer = this;
			try {
				executor.submit(new Runnable() { //用一个新线程去删除
					public void run() {
						s.removeObserver(observer);
					}
				}).get();
			} catch xxx
				...
			finally {
				executor.shutdown();
			}
		}
	}
});
由于后台调用s.removeObserver企图获取锁，但主线程已经获取锁了，在遍历列表时，这时主线程自己获取锁，然后还在等待新建线程获取锁，死锁

解决方法：
把外来方法调出同步块
List<SetObserver<E>> snapshot = null;
synchronized(observers) {
	snapshot = new ArrayList<SetObserver<E>>(observers);
}
for (SetObserver<E> observer:snapshot) //在synchronized外面不涉及锁，所以重写add方法不会导致问题
	observer.added(xx);

还有一种方法，用concurrent collection，CopyOnWriteArrayList，这个数据结构，可在写的时候拷贝数组，总之就是可以在多线程使用而不需要同步，因为java已经做了。

总结：避免在同步块内调用其他访问同步的代码，基本可以说尽量少调用其他未知函数，限制在同步区的代码量和复杂度，不要类内部同步，不同函数相互在同步区域访问受保护的数据，容易引起异常死锁，因为同步是线程间的，现场内部很容易出异常，而且防止自己持有锁还新起线程获取锁


第六十八条， executor和task优于线程
java.util.concurrent是线程中很重要的包，要常用，不要自己控制线程很容易出错
ExecutorService executor = Executors.newSingleThreadExecutor();
executor.execute(runnable);
executor.shutdown();

TheadPoolExecutor用于管理多个线程
注： 务必用Java提供的东西，别自己瞎写，容易出问题，尤其是逻辑复杂时


第六十九条， 并发工具优先于wait和notify
并发工具有三种（在java.util.concurrent中）：Executor Framework,并发集合和同步器
并发集合为标准集合接口List，Set，map的concurrent版，比如ConcurrentMap
BlockingQueue用于同步队列，如果队列为空就等待，大多数ExecutorService的实现都用的这个，如ThreadPoolExecutor
优先使用ConcurrentCollection

同步器Synchronizer是如Semaphore之类的对象，更优化，更好用

总结： 用ConCurrentHashMap，ThreadPoolExecutor，Semaphore，不要用其他Java初级提供的notify等，用concurrent包，而不是其他的


第七十条， 线程安全性的文档化
告诉线程的安全级别，比如非线程安全等，这个主要是写API时用，暂时不用管这条


第七十一条， 慎用延迟初始化
private FieldType field;
synchronized FiledType getField() {
	if (field == null)
		field = computeFieldValue();
	return field;
}
用到在初始化，到时这种延迟初始化会导致用时慢，一般能不用就不用，正常初始化优于延迟初始化，个人觉得延迟初始化可能会忘了初始化，用时发生异常，所以最好不用


第七十二条， 不要依赖于线程调度器
yield，优先级等调度器，如果调试时可以用，但是在运行时，如果线程的结果依赖于调度器则不可行，因为不同的电脑上优先级之类的可能不确定，有效性也不一定，如果线程的执行结果依赖于调度则可移植性就会差很多


第七十三条， 避免使用线程组
用线程池，而不是线程组，这是个java的烂尾组件，直接用新的，ConcurrentMap，线程池



第十一章， 序列化
第七十四条， 谨慎地实现Serializable接口
序列化是把一个对喜爱那个编码成字节流，反过来是反序列化，一个实例序列化implements Serializable就行，但是会引发很多问题
第一，序列化后的接口发布就降低了灵活性，以后需要不断兼容序列化各种麻烦
第二，测试负担加重，后面每次都要测序列化
注解：如果一个类是为继承而设计的，则不要实现序列化，如果一个类只影响自己，而且很需要序列化，那就可以用


第七十五条， 设计自己的序列化
基本意思是规避掉默认序列化的缺点，反正序列化少用，用了就默认，其他的不考虑

第七十六条，第七十七条都是关于怎么写自定义序列化的，比如readObj之类的，先不考虑自己写序列化的情况


第七十八条， 考虑用序列化代理代替序列化实例
如果非序列化不可，就用这种方法，内部静态类实现序列化，而不是外部类自己,静态类的构造函数参数是外部类，需要的话就把外部类实例传进来序列化
public　class Period {
	...

	private static class SerializeationProxy implements Serilizable {
		private final Date start;
		private final Date end;

		SerializeationProxy(Period time) {
			this.start = time.start;
			this.end = time.end;
		}
	}

	private Object write() {
		return new SerializeationProxy(this);
	}
}

/*****************The End*****************/