第一章 并发编程的挑战
1. 上下文切换
任务从保存到加载的过程就是一次上下文切换
线程越多不一定越快，因为有线程创建和上下文切换开销
Lmbench3，一个性能分析工具，可以测量上下文切换时长
vmstat可以测量上下文切换的次数

减少上下文切换方法：
无锁并发编程：ID按照Hash算法分段，不同线程处理不同段，ConcurrentHashMap
CAS算法，Java Atomic包基于CAS
避免创建不需要的线程
协程：单线程里多任务调度，单线程维持多个任务间切换（了解）

jstack dump pid=3117进程里的线程
sudo -u admin /opt/ifeve/java/bin/jstack 3117 > dump3117

2.死锁
避免死锁的方法：
避免一个线程同时获得多个锁
避免一个线程在锁内同时占用多个资源，尽量保证每个锁保护一个资源
使用lock.tryLock(timeout)
数据库中加锁和解锁必须在一个数据库连接里

3.资源限制
硬件资源限制可考虑用集群并发执行，软件资源限制可考虑用资源池，比如数据库连接池，调用对方WebService时只建立一个连接（单例）

注： 多用JDK并发包提供的工具类和容器，这些类都经过优化和测试，可用性很高


第二章 Java并发机制的底层实现原理
Java-编译-Java字节码-JVM-JVM执行字节码-汇编指令-CPU
Java依赖于JVM和CPU指令

1. volatile
多处理器中保证共享变量的可见性，可见性是当一个线程修改一个共享变量时，另一个线程可以读到这个修改的值
volatile比synchronized成本低，因为它不会引起上下文切换
volatile的原理：volatile最终会转化为汇编的Lock指令，而Lock前缀指令在多处理器中会引发两件事情：
1）将当前处理器缓存的数据写回系统内存
2）这个写回内存的操作会使在其他CPU里缓存了该内存地址的数据无效

2. synchronized
普通同步方法，锁是当前对象；静态同步方法，锁是当前类的Class对象；同步方法快，锁是synchronized括号里配置的对象
实现原理：JVM基于进入和退出Monitor对象来实现方法同步和代码块同步，其中代码块同步用monitorenter和monitorexit指令实现，而方法同步的实现方式JVM里没有细说，不过也可以用monitorenter和monitorexit指令实现
编译后，monitorenter指令插入到同步代码块的开始，monitorexit指令插入到结束和异常处，JVM保证两个成对出现，任何一个对象都有一个monitor与之关联，线程执行monitorenter指令尝试获取对象关联的Monitor的所有权，即尝试获取对象锁

synchronized用的锁是存在Java对象头里的，如果对象是数组类型则用3个字宽存储对象头，非数组类型用2个字宽，32位JVM，1个字宽等于4字节
一个字宽存Mark Word,一个字宽存对象指针，如果数组还有一个数组长度
其中Mark Word中存着锁状态，对象的hashCode，对象分带年龄，是否偏向锁，锁标志位

为了减少加锁解锁的消耗，java1.6引入偏向锁和轻量级锁，所以一共有四种状态：无状态锁，偏向锁状态，轻量级锁状态，重量级锁状态
偏向锁（发现很多时候其实不存在多线程竞争，而总是同一个线程获取锁，所以引入了偏向锁）：
基本是说获取锁时检查Mark Word里是否有指向当前线程的偏向锁，如果有则表示已经获取锁了，
如果没有则看Mark Word里的偏向锁状态是否为1，如果是则尝试用CAS把偏向锁指向当前线程，如果为0则用CAS竞争锁
轻量级锁： 先在当前线程中创建用于存储锁记录的空间，并赋值对象头中的Mark Word到该空间，然后尝试用CAS把对象头中的Mark Word替换为指向锁记录的指针

各种锁的比较
偏向锁：加锁解锁不需要额外消耗，几乎和非同步方法执行速度一样；但是如果线程间存在竞争会带了额外撤销锁的花销；适合只有一个线程访问同步块的情况
轻量级锁：线程竞争不会阻塞，提供响应速度；自旋会消耗CPU；适合追求相应时间的情况
重量级锁： 线程竞争会阻塞，不消耗CPU；慢；适合追求吞吐量的情况

3. 原子操作的实现原理
CAS，Compare And Swap，基本思路：一个旧值（期望操作前的值）和一个新值，在操作期间先比较旧值有没有发生变化，如果没有才赋成新值，如果发生变化，则不赋值

Java中的原子实现：
Java通过锁和循环CAS实现原子操作
1）JVM用CAS操作实现原子操作，而CAS操作利用了处理器的CMPXCHG指令，即自旋执行CAS直到成功为止，
（AtomicBoolean，AtomicInteger，AtomicLong基于CAS）

CAS的三个问题：
a.ABA问题
如果一个值原来是A，变成了B，又变成了A，用CAS检查则没有发生变化，但实际发生了变化.
ABA解决办法是版本号，每次更新时把版本号加1如A-B-A成1A-2B-3A
java 1.5开始Atomic包提供了AtomicStampedReference来解决ABA问题
b.循环时间长开销大
c.只能保证一个共享变量的原子操作，这时可以用锁
2）锁实现原子操作
这个好理解，获取锁然后再操作，不会有同步问题，锁有偏向锁，轻量级锁，重量级锁，其中前两个也是基于CAS，所以CAS是一个并发的核心理念


第三章 Java内存模型
1. Java内存模型的基础
线程之间通信机制有两种：共享内存和消息传递
Java用的是共享内存，Java线程之间的通信是透明的

所有的实例域，静态域和数组元素都存在堆内存中，称共享变量；局部变量，方法参数，异常处理等不会在线程间共享；线程间通信由JMM（java内存模型）空值

缓存可以提高处理器效率，避免频繁操作内存而使处理器停顿，但是有个问题就是，缓存只对该处理器可见，所以现代处理器都会对读写操作重排序，重排序是编译器和处理器为了优化程序性能而对指令序列进行重新排序的一种手段。
JMM使用happens-before规则保证内存可见性，避免程序员关心复杂的，不同类型的重排序
happens-before不意味着一个操作必须要在后一个操作之前执行，它仅仅要求前一个操作的结果对后一个可见

JMM的具体实现为在不改变程序的执行结果前提下，尽量允许重排序，比如获取锁之后不影响结果的重排序，单线程重拍序不会影响结果，主要是多线程情况下

2.volatile的内存语义
volatile变量的特性：
可见性。对一个volatile变量的读，总是能看到任意线程对这个volatile变量最后的写入（happens-before规则）
原子性。对单个volatile变量的读写具有原子性，但类似i++的符合操作不具备原子性，那个是Atomic的用处

JMM中volatile的语义（内存语义基本可以理解为工作原理）
volatile写的内存语义：当写一个volatile变量时，JMM会把该线程对应的本地内存中的共享变量值刷新到主内存
volatile读的内存语义：当读一个volatile变量时，JMM会把该线程对应的本地内存置为无效，接下来从主内存中读取共享变量

为实现volatile内存语义，在编译成字节码时，会在指令序列中插入内存屏障来禁止处理器的重排序

3.锁的内存语义
释放获取建立happens-before关系
当线程获取锁时，JMM会把该线程对应的本地内存置为无效，从而使得临界区代码必须从内存中读取共享变量


第四章 Java并发编程基础
1. 基础
线程是操作系统调度的最小单元，轻量级进程，一个进程里可以创建多个线程，它们用于各自的计数器，局部变量和函数调用栈，而且能够访问共享变量，处理器高速切换，让用户感觉这些线程在同时执行
仅仅运行main函数就有好几个线程启动，并非只有main一个，可调用ManagementFactory.getThreadMXBean()获取，如
Signal Dispatcher，处理JVM的信号
Finalizer，调用对象finalize方法
Reference Handler清楚Reference
main 用户程序入口

不同系统对JVM线程优先级存在差异，有的会忽略Java优先级

线程有这几种状态：
NEW（初始），构建完成，还没调用start
RUNNABLE（运行），Java把系统就绪和运行笼统的成为RUNNABLE，即RUNNABLE包括READY，RUNNING
BLOCKED，阻塞
WAITING，等待
TIME_WAITING（超时等待），指定时间内返回
TERMINATED（终止），线程执行完成

jstack可以打印运行时线程信息

NEW-start()-RUNNABLE（RUNNING或READY）
RUNNING-yeild()-READY
READY-系统调度-RUNNING
RUNNABLE-wait(),join(),LockSupport.park()-等待
RUNNABLE-wait(long),join(long),sleep(long),LockSupport.parkNanos(),LockSupport.parkUtil()-TIMED_WAITING
RUNNABLE-等待synchronized,锁-BLOCKING阻塞
WAITING，TIMED_WAITING-notify(),notifyAll,LockSupport.unpark(Thread)-RUNNABLE
BLOCKED-获取锁-RUNNABLE
RUNNABLE-完成-TERMINATED

thread.setDaemon(true);

线程通过start()方法启动，随着run方法执行完毕而终止

为线程命名，方便jstack分析

不要用stop方法，用interrupt方法
线程通过isInterrupted方法判断自身是否可中断，Thread.interrupted()对当前线程的中断标识位复位，在抛出InterruptedException之前，
JVM会先将该线程的中断标识位清除，此时调用interrupt方法返回false

suspend，resume，stop方法有副作用，用wait，notify代替，或者更好的用Lock，Semaphore等，总之java中有过期用法，只不过为了兼容而放在那，不要用

Runnable Thread
在java中可有两种方式实现多线程，一种是继承Thread类，一种是实现Runnable接口；Thread类是在java.lang包中定义的。一个类只要继承了Thread类同时覆写了本类中的run()方法就可以实现多线程操作了，但是一个类只能继承一个父类，这是此方法的局限。
Thread:
MyThread m = new Thread("No.1");
m.run()

Runnable:
MyThread m = new Thread("No.1");
new Thread(m).start();  //Thread启动Runnable
一旦调用start()方法，则会通过JVM找到run()方法,Thread类是Runnable接口的子类。
在程序开发中只要是多线程肯定永远以实现Runnable接口为主，因为实现Runnable接口相比继承Thread类有如下好处：
避免点继承的局限，一个类可以继承多个接口。
适合于资源的共享

用一个volatile boolean变量空值是否要停止任务是最常用的方法
public class Runner implements Runnable {
	private volatile boolean on = true;
	@Override
	public void run() {
		while(on) {
			i++;
		}
	}

	public void cancel() {
		on = false;
	}
}

Runner run = new Runner();
Thread countThread = new Thread(run, "Threadname");
countThread.start();

2. 线程间通信
volatile和synchronized
Java支持多个线程同时访问一个对象或者对象的成员变量，由于每个线程可以拥有这个变量的拷贝，所以在执行过程中，一个线程看到的变量不一定是最新的
虽然对象及其成员变量的是在共享内存中的，但是每个线程还是可以有拷贝，目的是加速执行
关键字volatile修饰的成员变量，就是告知程序任何对该变量的访问均需从共享内存中获取，而对它的修改必须刷回共享内存，保证多线程对变量的可见性
关键字synchronized可以修饰方法或同步块，主要确保多个线程在同一时刻，只能有一个线程处于方法或者同步块中，保证了线程对变量访问的可见性和排他性

synchronized实现：任意一个对象都拥有自己的Monitor，当这个对象由同步块或者同步方法调用时，执行的线程必须现先获取该对象的Monitor才能进入同步模块或者同步方法，而没有获取到Monitor的线程将被阻塞（BLOCEKD，不是READY，READY和RUNNING统称运行中，这点要清楚）在入口处

wait/notify（任意对象都具备这两个方法，它们被定义在Object上，如syncObj.wait,syncObj.nofity）
注意事项：
使用wait(),notify(),notifyAll()要先对调用对象加锁，即它们出现在同步区域内，不是外面；
调用wait()后线程由RUNNING变成WAIT；
notify方法将等待队列中的一个等待线程从等待队列放到同步对列中（注意，Java同步有很多队列数据结构，一般都是FIFO的）；
notifyAll方法吧等待队列中所有线程移动到同步对列；
notify和notifyAll调用后，等待线程不会从wait返回，需要调用notify()和notifyAll()线程释放锁后，等待线程才有机会返回；
wait方法返回的前提是获得了锁
（注：wait,notify,notifyAll，屏蔽了获取Monitor的过程，实际进入同步对列还需要竞争Monitor，不是Lock，锁是概念，Lock是对象，Java后来才加的，最开始只有synchronized，所以说Monitor是锁，不是Lock对象）

wait/nofify模板
等待方：
synchronized(对象) {
	while(条件不满足) {
		对象.wait();
	}
	...
}

通知方：
synchronzied(对象) {
	改变条件
	对象.notifyAll();
}
操作都是对象，用同步的对象去notify，这个对象的方法用于操作具体事情

PipedOutputStream PipedInputStream，管道，了解

join是如果线程A执行了B.join()，则A会等待B终止后才从该函数返回，继续执行（注：一般是自己new出的线程，Thread B=new xxx）
（注：wait和join一般都是用有时间的，防止无限期等待）

ThreadLocal（线程变量）
一个以ThreadLocal对象为键，任意对象为值得存储结构，附带在线程=上，一个线程可以根据一个ThreadLocal对象查找到绑定在该线程上的值
set(xxx),get()
private static final ThreadLocal<Long> TIME = new ThreadLocal<Long>();
TIME.set(System.currentTimeMillis());
TIME.get();

3.实例
(1)等待超时
基本逻辑
public synchronized Object get(long mills) throws InterruptedException {
	long future = System.currentTimeMills() + mills;
	long remaining = mills;
	while((result == null) && remaining > 0) {
	//从wait返回可能是超时，可能是notify，返回后需要检查剩余时间
		wait(remaining);
		remaining = future - System.currentTimeMills();
	}
	return result;
}
常用，因为能防止无限制阻塞等待
result判断是否为null也很值得注意，因为不光是超时，而且是没有预期结果才会返回，如果有的话就直接处理了

数据库连接池Demo
1000ms无法得到连接就返回超时

ConnectionPool.java
public class ConnectionPool {
	private LinkedList<Connection> pool = new LinkedList<Connection>();

	public ConnectionPool(int initialSize) {
		if (initialSize > 0) {
			for (int i=0; i<initialSize; i++) {
				pool.addLast(ConnectionDriver.createConnection);//ConnectionDriver是生成连接的类
			}
		}
	}

	public void releaseConnection(Connection connection) {
		if (connection != null) {
			synchronized(pool) {//对Object做同步，即需要操作临界区的对象
				pool.addLast(connection);
				pool.notifyAll();//释放连接通知其它消费者知道连接池中多了一个连接
			}
		}
	}

//在mills内无法取得连接，则返回null
	public Connection fetchConnection(long mills) throws InterruptedException {
		synchronized(pool) {//能synchronized对象就不要synchronized方法，减少同步的区域，增加效率
			if (mills <= 0) {
				while (pool.isEmpty()) {
					pool.wait();
				}
				return pool.removeFirst();
			} else {
				long future = System.currentTimeMills() + mills;
				long remaining = mills;
				while (pool.isEmpty() && remaining > 0) {
					pool.wait(remaining);//从wait返回可能是超时，可能是notify，返回后需要检查剩余时间
					remaining = future - System.currentTimeMillis();
				}
				Connection result = null;
				//从while循环跳出来可能是获取锁，也可能是超时，都可以试图获取连接
				if (!pool.isEmpty()) {
					result = pool.removeFirst();
				}
				return result;
			}
		}
	}
}

ConnectionDriver.java
public class ConnectionDriver {
//动态代理，TargetObj，执行的是该类中的方法,必须implements InvocationHandler
	static class ConnectionHandler implements InvocationHandler {
		public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {
			if (method.getName().equals("commit")) {
				TimeUnit.MILLISECONDS.sleep(100);
			}
			return null;
		}
	}

	//创建Connectino接口的代理，在commit时睡眠100毫秒，java.sql.Connection
	public static final Connection createConnection() {
	//动态代理，看后面的详细介绍
		return (Connection) Proxy.newProxyInstance(ConnectionDriver.class.getClassLoader(),
		new Class<?>[] {Connection.class}, new ConnectionHandler());
	}
}

ConnectionPoolTest.java
//模仿客户端调用
public class ConnectionPoolTest {
	static ConnectionPool pool = new ConnectionPool(10);
	static CountDownLatch start = new CountDonwLatch(1);//保证所有客户端线程同时启动
	static CountDownLatch end;

	public static void main(String[] args) throws Exception {
		int threadCount = 10;
		end = new CountDownLatch(threadCount);//main需要等到客户端线程结束才能继续
		int count = 20;
		AtomicInteger got = new AtomicInteger();
		AtomicInteger notGot = new AtomicInteger();
		for (int i=0; i< threadCount; i++) {
			Thread thead = new Thread(new ConnectionRunner(count, got, notGot)), 
			"ConnectionRunnerThread");
			thread.start();
		}
		start.countDown();
		end.await();
		System.out.println("total invoke: " + (threadCount * count));
		System.out.println("got connection: " + got);
		System.out.println("not got connection: " + notGot);
	}

	static class ConnectionRunner implements Runnable {
		int count;
		AtomicInteger got;
		AtomicInteger notGot;

		public ConnectionRunner(int count, AtomicInteger got, AtomicInteger notGot) {
			this.count = count;
			this.got = got;
			this.notGot = notGot;

			public ConnectionRunner(int count, AtomicInteger got, AtomicInteger notGot) {
				this.count = count;
				this.got = got;
				this.notGot = notGot;
			}

			public void run() {
				try {
					start.await();//等待countDown发出的信号
				} catch (Exception ex) {
				}
				while (count > 0) {
					try {
						Connection connection = pool.fetchConnection(1000);
						if (connection != null) {
							try {
								connection.createStatement();
								connection.commit();
							} finally {
								pool.releaseConnection(connection);
								got.incrementAndGet();
							}
						} else {
							notGot.incrementAndGet();
						}
					} catch (Exception ex) {

					} finally {
						count--;
					}
				}
			}
			end.countDown();
		}
	}
}
注：其中CountDownLatch，finally释放，AtomicInteger,线程要命名，动态代理，await，result==null&&remaining>0等都是需要注意的地方

动态代理：
JDK动态代理中包含一个类和一个接口： 
InvocationHandler接口： 
public interface InvocationHandler { 
public Object invoke(Object proxy,Method method,Object[] args) throws Throwable; 
} 
参数说明： 
Object proxy：指被代理的对象。 
Method method：要调用的方法 
Object[] args：方法调用时所需要的参数 

可以将InvocationHandler接口的子类想象成一个代理的最终操作类，替换掉ProxySubject。 

Proxy类： 
Proxy类是专门完成代理的操作类，可以通过此类为一个或多个接口动态地生成实现类，此类提供了如下的操作方法： 
public static Object newProxyInstance(ClassLoader loader, Class<?>[] interfaces, 
InvocationHandler h) 
                               throws IllegalArgumentException 
参数说明： 
ClassLoader loader：类加载器 
Class<?>[] interfaces：得到全部的接口 
InvocationHandler h：得到InvocationHandler接口的子类实例 

Ps:类加载器 
在Proxy类中的newProxyInstance（）方法中需要一个ClassLoader类的实例，ClassLoader实际上对应的是类加载器，在Java中主要有一下三种类加载器; 
Booststrap ClassLoader：此加载器采用C++编写，一般开发中是看不到的； 
Extendsion ClassLoader：用来进行扩展类的加载，一般对应的是jre\lib\ext目录中的类; 
AppClassLoader：(默认)加载classpath指定的类，是最常使用的是一种加载器。 

动态代理 
与静态代理（设计模式中的代理模式，他的特征是代理类与委托类有同样的接口，代理类主要负责为委托类预处理消息、过滤消息、把消息转发给委托类）类对照的是动态代理类，动态代理类的字节码在程序运行时由Java反射机制动态生成，无需程序员手工编写它的源代码。动态代理类不仅简化了编程工作，而且提高了软件系统的可扩展性，因为Java 反射机制可以生成任意类型的动态代理类。java.lang.reflect 包中的Proxy类和InvocationHandler 接口提供了生成动态代理类的能力。 

动态代理示例: 
1、BookFacade.java 

package net.battier.dao;  
  
public interface BookFacade {  
    public void addBook();  
}  
 

2、BookFacadeImpl.java 

package net.battier.dao.impl;  
  
import net.battier.dao.BookFacade;  
  
public class BookFacadeImpl implements BookFacade {  
  
    @Override  
    public void addBook() {  
        System.out.println("增加图书方法。。。");  
    }  
  
}  
  
、BookFacadeProxy.java  
  
package net.battier.proxy;  
  
import java.lang.reflect.InvocationHandler;  
import java.lang.reflect.Method;  
import java.lang.reflect.Proxy;  
  
/** 
 * JDK动态代理代理类 
 *  
 * @author student 
 *  
 */  
public class BookFacadeProxy implements InvocationHandler {  
    private Object target;  
    /** 
     * 绑定委托对象并返回一个代理类 
     * @param target 
     * @return 
     */  
    public Object bind(Object target) {  
        this.target = target;  
        //取得代理对象  
        return Proxy.newProxyInstance(target.getClass().getClassLoader(),  
                target.getClass().getInterfaces(), this);   //要绑定接口(这是一个缺陷，cglib弥补了这一缺陷)  
    }  
  
    @Override  
    /** 
     * 调用方法 
     */  
    public Object invoke(Object proxy, Method method, Object[] args)  
            throws Throwable {  
        Object result=null;  
        System.out.println("事物开始");  
        //执行方法  
        result=method.invoke(target, args);  
        System.out.println("事物结束");  
        return result;  
    }  
  
}  
 

3、TestProxy.java 

package net.battier.test;  
  
import net.battier.dao.BookFacade;  
import net.battier.dao.impl.BookFacadeImpl;  
import net.battier.proxy.BookFacadeProxy;  
  
public class TestProxy {  
  
    public static void main(String[] args) {  
        BookFacadeProxy proxy = new BookFacadeProxy();  
        BookFacade bookProxy = (BookFacade) proxy.bind(new BookFacadeImpl());  
        bookProxy.addBook();  
    }  
  
}  

但是，JDK的动态代理依靠接口实现，如果有些类并没有实现接口，则不能使用JDK代理，这就要使用cglib动态代理了。 

Cglib动态代理 
JDK的动态代理机制只能代理实现了接口的类，而不能实现接口的类就不能实现JDK的动态代理，cglib是针对类来实现代理的，他的原理是对指定的目标类生成一个子类，并覆盖其中方法实现增强，但因为采用的是继承，所以不能对final修饰的类进行代理。 
示例 
1、BookFacadeCglib.java 

package net.battier.dao;  
  
public interface BookFacade {  
    public void addBook();  
}  
 

2、BookCadeImpl1.java 

package net.battier.dao.impl;  
  
/** 
 * 这个是没有实现接口的实现类 
 *  
 * @author student 
 *  
 */  
public class BookFacadeImpl1 {  
    public void addBook() {  
        System.out.println("增加图书的普通方法...");  
    }  
}  

3、BookFacadeProxy.java 

package net.battier.proxy;  
  
import java.lang.reflect.Method;  
  
import net.sf.cglib.proxy.Enhancer;  
import net.sf.cglib.proxy.MethodInterceptor;  
import net.sf.cglib.proxy.MethodProxy;  
  
/** 
 * 使用cglib动态代理 
 *  
 * @author student 
 *  
 */  
public class BookFacadeCglib implements MethodInterceptor {  
    private Object target;  
  
    /** 
     * 创建代理对象 
     *  
     * @param target 
     * @return 
     */  
    public Object getInstance(Object target) {  
        this.target = target;  
        Enhancer enhancer = new Enhancer();  
        enhancer.setSuperclass(this.target.getClass());  
        // 回调方法  
        enhancer.setCallback(this);  
        // 创建代理对象  
        return enhancer.create();  
    }  
  
    @Override  
    // 回调方法  
    public Object intercept(Object obj, Method method, Object[] args,  
            MethodProxy proxy) throws Throwable {  
        System.out.println("事物开始");  
        proxy.invokeSuper(obj, args);  
        System.out.println("事物结束");  
        return null;  
  
  
    }  
  
}  

4、TestCglib.java 

package net.battier.test;  
  
import net.battier.dao.impl.BookFacadeImpl1;  
import net.battier.proxy.BookFacadeCglib;  
  
public class TestCglib {  
      
    public static void main(String[] args) {  
        BookFacadeCglib cglib=new BookFacadeCglib();  
        BookFacadeImpl1 bookCglib=(BookFacadeImpl1)cglib.getInstance(new BookFacadeImpl1());  
        bookCglib.addBook();  
    }  
}  

(2)线程池
ThreadPool.java
public interface ThreadPool<Job extends Runnable> {//泛型
	void execute(Job job);
	void shutdown();
	void addWorkers(int num);
	void removeWork(int num);
	int getJobsize();
}
客户端通过execute(Job)把Job提交到线程池执行，而客户端也不用等Job的执行完成，还有对worker的操作和shutdown操作。Worker代表一个重复执行Job的线程，而每个由客户端提交的Job豆浆进入到一个工作队列中等待工作者线程的处理

public class DefaultThreadPool<Job extends Runnable> implements ThreadPool<Job> {
	private static final int MAX_WORKER_NUMBERS = 10;
	private static final int DEFAULT_WORKER_NUMBERS = 5;
	private static final int MIN_WORKER_NUMBERS = 1;
	private final LinkedList<Job> jobs = new LinkedList<Job>();//这块由后面的访问函数保证synchronized
	private final List<Worker> workers = Collections.synchronizedList(new ArrayList<Worker>());
	private int workerNum = DEFAULT_WORKER_NUMBERS;
	private AtomicLong threadNum = new AtomicLong();

	public DefaultThreadPool() {
		initializeWorkers(DEFAULT_WORKER_NUMBERS);
	}

	public DefaultThreadPool(int num) {
		workNum = num > MAX_WORKER_NUMBERS ? MAX_WORKER_NUMBERS : num < MIN_WORKER_NUMBERS ? MIN_WORKER_NUMBERS : num;
		initializeWorkers(workNum);
	}

	public void execute(Job job) {
		if (job != null) {
			synchronized(jobs) {//job队列
				jobs.addLast(job);
				jobs.notify();//注意需要notify等待的线程
			}
		}
	}

	public void shutdown() {
		for (Worker worker : workers) {
			worker.shutdown();
		}
	}

	public void addWorkers(int num) {
		synchronized (jobs) {
			//不能超过最大容量
			if (num + this.workNum > MAX_WORKER_NUMBERS) {
				num = MAX_WORKER_NUMBERS - this.workerNum;
			}
			initializeWorkers(num);
			this.workerNum += num;
		}
	}

	public void removeWorker(int num) {
		synchronized (jobs) {
			if (num >= this.workerNum) {
				throw new IllegalArgumentException("beyond workNum");
			}
			//停止指定数量的Worker
			int count = 0;
			while (count < num) {
				Worker worker = workers.get(count);
				if (workers.remove(worker)) {
					worker.shutdown();
					count++;
				}
			}
			this.workerNum -= count;
		}
	}

	public int getJobSize() {
		return jobs.size();
	}

	private void initializeWorkers(int num) {
		for (int i=0; i<num; i++) {
			Worker worker = new Worker();
			workers.add(worker);
			Thread thread = new Thread(worker, "ThreadPool-Worker-" + threadNum.incrementAndGet());
			thread.start();
		}
	}

	//内部类
	class Worker implements Runnable {
		private volatile boolean running = true;
		public void run() {
			while(running) {
				Job job = null;
				synchronized (jobs) {
					while(jobs.isEmpty()) {
						try {
							jobs.wait();
						} catch (InterruptedException ex) {
							Thread.currentThread().interrupt();
							return;
						}
					}
					job = jobs.removeFirst();//取出一个
				}
				if (job != null) {
				try {
					job.run();
				} catch (Exception ex) {
					...
				}
			}
		}

		public void shutdown() {
			running = false;
		}
	}
}

总：使用notify而不是notifyAll是因为唤醒一个
线程池的本质是使用了一个线程安全的工作队列连接工作者线程和客户端线程，客户端将任务放到工作队列后就返回，而工作者线程则不断地从工作队列上取出工作并执行

(3) 一个基于线程池技术的简单Web服务器
public class SimpleHttpServer {
	//处理HttpRequest的线程池
	static ThreadPool<HttpRequestHandler> threadpool = new DefaultThreadPool<HttpRequestHandler>(1);
	static String basePath;
	static ServerSocket serverSocket;
	static int port = 8080;

	public static void setPort(int port) {
		if (port > 0) {
			SimpleHttpServer.port = port;
		}
	}

	public static void setBasePath(String basePath) {
		if (xxx) {//检查basepath合法性
			SimpleHttpServer.basePath = basePath;
		}
	}

	//启动server
	public static void start() throws Exception {
		serverSocket = new ServerSocket(port);
		Socket socket = null;
		while ((socket = serverSocket.accept()) != null) {
			threadPool.execute(new HttpRequestHandler(socket));
		}
		serverSocket.close();
	}

	static class HttpRequestHandler implements Runnable {
		private Socket socket;
		public HttpRequestHandler(Socket socket) {
			this.socket = socket;
		}

		@Override
		public void run() {
			String line = null;
			BufferedReader br = null;
			BufferedReader reader = null;
			PrintWirter out = null;//能处理字符流和字节流
			InputStream in = null;
			try {
				reader=new BufferedReader(new InputStreamReader(socket.getInputStream()));
				String header = reader.readLine();
				String filePath = basePath = header.split(" ")[1];//计算绝对路径
				out = new PrintWriter(socket.getOutputStream());
				if(filePath.endWith("jpg") || filePath.endsWith("ico")) {//客户端请求图片
					in = new FileInputStream(filePath);
					ByteArrayOutputStream baos = new ByteArrayOutputStream();
					int i = 0;
					while((i = in.read()) != -1) {
						baso.write(i);
					}
					byte[] array = baos.toByteArray();
					out.println("HTTP/1.1 200 OK");
					out.println("Server: Molly");
					out.println("Content-Type: image/jpeg");
					out.println("Content-Length: " + array.length);
					out.println("");
					socket.getOutputStream().write(array, 0, array.length);
				}
			}
			out.flush();
		} catch (Exception ex) {
			out.println("HTTP/1.1 500");
			out.println("");
			out.flush();
		} finally {
			close(br, in, reader, out, socket);
		}
	}

	private static void close(Closeable... closeable) {
		if (closeable != null) {
			for(Closeable closeable : closeables) {
				try {
					closeable.close();
				} catch (Exception ex){...}
			}
		}
	}
}


第五章 Java中的锁
1. Lock接口
Lock出现之前，Java靠synchronized实现锁，synchronized虽然可以隐形获取和释放锁，但不灵活，没有超时，可中断,非阻塞获取锁等
不要把获取锁的代码写在try里，如果发生异常，会导致锁无故释放
//正确写法
Lock lock = new ReentrantLock();//可重入锁
lock.lock();
try {
	...
} finally {
	lock.unlock();
}
这块主要的函数：tryLock，lock，lockInterruptibly（可响应中断），unlock，newCondition（获取等待通知组件，只有获取了lock，才能调用组件的wait）
Lock接口基本都是通过聚合一个同步器的子类来完成的

2.队列同步器(AbstractQueuedSynchronizer)
使用一个int变量表示同步状态，通过FIFO队列完成线程资源排队，同步器通过实现AbstractQueuedSynchronizer的抽象方法实现
AbstractQueuedSynchronizer提供了三个方法来管理同步状态：
getState():获取当前同步状态
setState(int newState):设置同步状态
compareAndSetState(int expect, int update):使用CAS设置当前状态，保证设置的原子性

同步器可实现的抽象方法：tryAcquire，tryRelease，tryAcquireShared，tryReleaseShared，isHelExclusively
同步器维护一个FIFO的链表，添加节点，删除节点都需要CAS保证原子性，链表的首尾地址存在同步器中

实现Mutex
class Mutex implements Lock {
	//静态内部类，自定义同步器
	private static class Sync extends AbstractQueuedSynchronizer {
		//是否处于占用状态
		protected boolean isHeldExclusively() {
			return getState() == 1;
		}

		//状态为0则获取锁
		public boolean tryAcquire(int acquires) {
			if (compareAndSetState(0, 1)) {
				setExclusiveOwnerThread(Thread.currentThread());
				return true;
			}
			return false;
		}

		//释放锁，把状态置为0
		protected boolean tryRelease(int release) {
			if (getState() == 0)
				throw IllegalMonitorStateException();
			setExclusiveOwnerThread(null);
			setState(0);
			return true;
		}

		//返回一个condition，每个condition包含一个condition队列
		Condition newCondition() { return new ConditionObject(); }
	}
	//各个方法代理到Sync上，这就是为什么Lock基于同步器的原因
	private final Sync sync = new Sync();
	public void lock() { sync.acquire(1); }
	public boolean tryLock() { return sync.tryAcquire(1); }
	public void unlock() { sync.release(); }
	public Condition newCondition() { return sync.newConditon(); }
	public boolean isLocked() { return sync.isHeldExclusively(); }
	public boolean hasQueuedThreads() { return sync.hashQueuedThreads(); }
	public void lockInterruptibly() throws InterruptedException { 
		sync.acquireInterruptibly(1);
	}
	public boolean tryLock(long timeout, TimeUnit unit) throws InterruptedException {
		return sync.tryAcquireNanos(1, unit, toNanos(timeout));
	}
}

3.重入锁
ReentrantLock，支持一个线程对资源的重复加锁
Mutex是不可重入，因为再次tryAcquire方法会返回false，synchronized隐形支持重入，同一个线程可重复获取同一个锁
ReentrantLock调用lock后再次调用不会被阻塞，基本原理就是在lock，tryLock方法中判断是不是以获取锁的线程获取锁，如果是直接返回true

4.读写锁
ReentrantReadWriteLock，支持多线程读，单线程写，一般情况下比排他性锁性能好，因为大多数场景是读
原理是自定义同步器中同步状态整型变量的高16位负责读，低16位负责写，通过位运算获取读写状态
读：int c = c + (1<<16);
1向右移16位于当前获取锁线程的数值相加，获取读锁线程数
比如，一共有3个线程有读锁
00000000000000110000000000000000
+
00000000000000010000000000000000
00000000000001000000000000000000
即高16位是4
写的话就必须是0，没有线程的状态，然后直接加1就行，这就是为什么低位负责写
00000000000000000000000000000001

5.LockSupport
当阻塞或唤醒一个线程时，会用LockSupport工具类，它定义了一组公共静态方法，这些方法提供了最基本的线程阻塞和唤醒功能
park,阻塞当前线程
parkNanos(long) 超时返回式阻塞
parkUnttil(long) 阻塞线程知道某个时间
unpark(Thread)唤醒

6.Condition接口
任意一个java对象都有Monitor（定义在java.lang.Object中），包括wait，wait(long)，notify()和notifyAll，这些方法与synchronized配合
Condition接口提供了类似Object监视器方法，与Lock配合实现等待通知






