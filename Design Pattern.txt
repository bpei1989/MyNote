设计模式的分类：创建型模式（如工厂模式，单例模式等）；结构型模式（如代理模式，装饰器模式等）；行为模式（如观察者，责任链模式）

设计模式的六大原则：
总原则：开闭原则，对扩展开发，对修改关闭；基本可以理解为往可扩展可维护的方向努力
(1)单一职责原则：每个类应该负责一种职责，否则就把类拆开
(2)里氏替换原则：子类对父类的方法尽量不要重载
(3)依赖倒转原则：面向接口编程，依赖抽象，比如Spring就是面向接口编程
(4)接口隔离原则：接口中不存在子类不需要的方法，如果存在就必须拆接口
(5)迪米特法则：一个类对自己以来的类知道的越少越好
(6)合成复用原则:聚合优于集成



一、创建模式
0.简单工厂模式
通过一个工厂类创建实现了同一接口的类的实例
例：发送邮件和短信
public interface Sender {
	public void send();
}

public MailSender implements Sender {
	@Override
	public void send() {
		System.out.println("Sending mail");
	}
}

public MessageSender implements Sender {
	@Override
	public void send() {
		System.out.println("Sending message");
	}
}

public class SendFactory {
	public Sender produce(String type) {
		if(type.equals("mail")) {
			return new MailSender();
		}
		if(type.equals("message")) {
			return new MessageSender();
		}
		return null;
	}	
}
注：适用于创建实现了同一个接口的类，缺点是如果要发送语音就需要修改工厂方法，可扩展性不好


1.工厂方法模式
创建一个工厂接口和多个工厂实现类，需要新功能的时候直接增加新的工厂类即可，而不需要修改原有代码
public interface Sender() {
	public void send();
}

public class MailSender implements Sender {
	@Override
	public void send() {
		System.out.println("Sending message");
	}
}

public class MessageSender implements Sender {
	@Override
	public void send() {
		System.out.println("Sending message");
	}
}

public interface Provider {
	public Sender produce();
}

public class SendMailFactory implements Provider {
	@Override
	public Sender produce() {
		return new MailSender();
	}
}

public class SendMessageFactory implements Provider {
	@Override
	public Sender produce() {
		return new MessageSender();
	}
}

public class Test {  
	public static void main(String[] args) {  
		Provider provider = new SendMailFactory();  
		Sender sender = provider.produce();  
		sender.Send();  
	}  
}  
注：基本思路就是创建一个生产工厂的工厂，各个工厂分别生产具体对象，如果需要增加一个发送语音的Sender，加一个实现Sender的类，一个工厂类实现Provider接口就可以


2.抽象工厂模式
多个抽象产品类，可有多个具体类
一个抽象工厂类，可有多个具体工厂类
每个具体工厂类可以创建多个具体产品类的实例

与工厂方法模式的区别，工厂方法模式只有一个抽象产品类，具体工厂类只能创建一个具体产品类实例

工厂可以生成鼠标键盘，抽象工厂的实现的对象都可以生产鼠标和键盘，但A工厂生产的是罗技的鼠标和键盘，B工厂生成的是联想的，这样A和B就是抽象工厂，每个工厂生成鼠标和键盘就是工厂方法。即抽象工厂方法类似工厂，而工厂方法类似产品线

/*抽象工厂接口，和工厂方法模式不同，这里有多个生产方法
生产多个产品，而工厂方法模式只能生产一种产品*/
public interface AbstractFactory {  
    public Mouse produceMouse();  
    public Keyboard producekeyBoard();  
}  

public interface Mouse {  
    public void getMouse();  
} 

public interface Keyboard {  
    public void getKeyboard();  
}  

public class LogicMouse implements Mouse {
	public void getMouse() {
		System.out.println("Logic Mouse");
	}
}

public class LogicKeyboard implements Keyboard {
	public void getKeyboard() {
		System.out.println("Logic KeyBoard");
	}
}

public class LenovoMouse implements Mouse {
	public void getMouse() {
		System.out.println("Lenovo Mouse");
	}
}

public class LenovoKeyboard implements Keyboard {
	public void getKeyboard() {
		System.out.println("Lenovo KeyBoard");
	}
}

//具体工厂，生产罗技鼠标键盘
public class ConcreateFactoryLogic implements AbstractFactory {  
    @Override  
    public Mouse produceMouse() {  
        return new LogicMouse();  
    }  
  
    @Override  
    public Keyboard producekeyBoard() {  
        return new LogicKeyboard();  
    }  
}  

//具体工厂，生产联想鼠标键盘
public class ConcreateFactoryLogic implements AbstractFactory {  
    @Override  
    public Mouse produceMouse() {  
        return new LenovoMouse();  
    }  
  
    @Override  
    public Keyboard producekeyBoard() {  
        return new LenovoKeyboard();  
    }  
}  


3.单例模式
保证该类只有一个实例存在，如默认Spring创建单例的Bean的实例
public class Singleton {
	private static Singleton instance = null; //延迟初始化
	private Singleton() {}
	public static synchronized Singleton getInstance() { //保证同步
		if(instance == null) {
			instance = new Singleton();
		}
		return instance;
	}
}


4. 建造者模式
将一个复杂的对象的构建与它的使用分离
public interface Builder { 
　　　　void buildPartA(); 
　　　　void buildPartB(); 
　　　　void buildPartC(); 
　　
　　　　Product getResult(); 
　　} 

   //具体建造工具
　　public class ConcreteBuilder implements Builder { 
　　　　Part partA, partB, partC; 

　　　　public void buildPartA() {
　　　　　　//这里是具体如何构建partA的代码
　　　　}; 
　　　　public void buildPartB() { 
　　　　　　//这里是具体如何构建partB的代码
　　　　}; 
　　　　 public void buildPartC() { 
　　　　　　//这里是具体如何构建partB的代码
　　　　}; 
　　　　 public Product getResult() { 
　　　　　　//返回最后组装成品结果
　　　　}; 
　　}

   //建造者
　　public class Director {
　　　　private Builder builder; 
　　
　　　　public Director( Builder builder ) { 
　　　　　　this.builder = builder; 
　　　　} 
　　　　public void construct() { 
　　　　　　builder.buildPartA();
　　　　　　builder.buildPartB();
　　　　　　builder.buildPartC(); 
　　　　} 
　　} 

　　public interface Product { }
　　public interface Part { }

使用：
　　ConcreteBuilder builder = new ConcreteBuilder();
　　Director director = new Director( builder ); 
　　
　　director.construct(); 
　　Product product = builder.getResult();


5.原型模式
将一个对象作为原型，对其进行复制、克隆，产生一个和原对象类似的新对象
原型必须实现Cloneable接口，重写Object的clone方法，通过super.clone方法实现
class Prototype implements Cloneable { 
    public Prototype clone(){ 
        Prototype prototype = null; 
        try{ 
            prototype = (Prototype)super.clone(); //重要的是这里
        }catch(CloneNotSupportedException e){ 
            e.printStackTrace(); 
        } 
        return prototype;  
    } 
} 
 
class ConcretePrototype extends Prototype{ 
    public void show(){ 
        System.out.println("原型模式实现类"); 
    } 
} 
 
public class Client { 
    public static void main(String[] args){ 
        ConcretePrototype cp = new ConcretePrototype(); 
        for(int i=0; i< 10; i++){ 
            ConcretePrototype clonecp = (ConcretePrototype)cp.clone(); 
            clonecp.show(); 
        } 
    } 
} 



B. 结构模式
6.适配器模式
主要分为三类：类的适配器模式、对象的适配器模式、接口的适配器模式
(1)类的适配器模式
public class Source {
	public void method1() {  
		System.out.println("this is original method!");  
	}  
}  

public interface Target {  
	/* 与原类中的方法相同 */  
	public void method1();  
	/* 新类的方法 */  
	public void method2();  
} 

public class Adapter extends Source implements Target {  
	@Override  
	public void method2() {  
		System.out.println("this is the target method!");  
	}  
}  
这样Target接口实现类就有Source的功能了

(2)对象的适配器模式
不继承Source类，而是持有Source类的实例
public class Wrapper implements Targetable {  
	private Source source;  

	public Wrapper(Source source){  
		super();  
		this.source = source;  
	}  
	@Override  
	public void method2() {  
		System.out.println("this is the targetable method!");  
	}  

	@Override  
	public void method1() {  
		source.method1();  
	}  
}  

(3)接口的适配器模式
一个接口中有多个抽象方法，写该接口的实现类时，必须实现该接口的所有方法，但有些时候不需要全部方法，此处为了解决这个问题，引入了接口的适配器模式，借助于一个抽象类，该抽象类实现了该接口，实现了所有的方法，而我们不和原始的接口打交道，只和该抽象类取得联系，所以写一个类，继承该抽象类，重写需要的方法就行
public interface Sourceable {  
	public void method1();  
	public void method2();  
}

public abstract class Wrapper implements Sourceable{  
	public void method1(){}  
	public void method2(){}  
}  

public class SourceSub1 extends Wrapper {  
	public void method1(){  
		System.out.println("the sourceable interface's first Sub!");  
	}  
}  

public class SourceSub2 extends Wrapper {  
	public void method2(){  
		System.out.println("the sourceable interface's second Sub!");  
	}  
}

类的适配器模式：当希望将一个类转换成满足另一个新接口的类时，可以使用类的适配器模式，创建一个新类，继承原有的类，实现新的接口即可。
对象的适配器模式：当希望将一个对象转换成满足另一个新接口的对象时，可以创建一个Wrapper类，持有原类的一个实例，在Wrapper类的方法中，调用实例的方法就行。
接口的适配器模式：当不希望实现一个接口中所有的方法时，可以创建一个抽象类Wrapper，实现所有方法，我们写别的类的时候，继承抽象类即可。


7.装饰器模式
装饰对象和被装饰对象实现同一个接口，装饰对象持有被装饰对象的实例
public interface Sourceable {  
	public void method();  
}  

public class Source implements Sourceable {  
	@Override  
	public void method() {  
		System.out.println("the original method!");  
	}  
}  

public class Decorator implements Sourceable {  
	private Sourceable source;  
		public Decorator(Sourceable source){  
		super();  
		this.source = source;  
	}  
	@Override  
	public void method() {  
		System.out.println("before decorator!");  
		source.method();  
		System.out.println("after decorator!");  
	}  
}  
装饰器模式的应用场景：
1、需要扩展一个类的功能。
2、动态的为一个对象增加功能，而且还能动态撤销。（继承不能做到这一点，继承的功能是静态的，不能动态增删。）
缺点：产生过多相似的对象，不易排错！

8.代理模式
代理模式就是多一个代理类出来，替原对象进行一些操作，比如我们在租房子的时候回去找中介
public interface Sourceable {
	public void method();
}

public class Source implements Sourceable {  
	@Override  
	public void method() {  
		System.out.println("the original method!");  
	}  
}  

public class Proxy implements Sourceable {  
	private Source source;  
		public Proxy(){  
		super();  
		this.source = new Source();  
	}  
	@Override  
	public void method() {  
		before();  
		source.method();  
		atfer();  
	}  
	private void atfer() {  
		System.out.println("after proxy!");  
	}  
	private void before() {  
		System.out.println("before proxy!");  
	}  
}  
代理模式的应用场景：如果已有的方法在使用的时候需要对原有的方法进行改进,采用一个代理类调用原有的方法，且对产生的结果进行控制。这种方法就是代理模式。

代理模式和适配器模式：
适配器模式是因为新旧接口不一致导致出现了客户端无法得到满足的问题，但是，由于旧的接口是不能被完全重构掉的，因为我们还想使用实现了这个接口的一些服务。那么为了使用以前实现旧接口的服务，我们就应该把新的接口转换成旧接口；实现这个转换的类就是抽象意义的转换器
虽然代理也同样是增加了一层，但是，代理提供的接口和原本的接口是一样的，代理模式的作用是不把实现直接暴露给client，而是通过代理这个层，代理能够做一些处理
适配器模式： Source-Adapter-Target
                     |
                   Clent
代理模式： Client-Proxy-Source
适配器是在需要在Target中用Source的方法，即两个不适配，需要中间有个转换
代理是需要调用某种方法，Source不想直接和Client接触，或者Source的处理比较复杂等，通过代理包装处理后给Client


9.Facade模式
外观模式，将类与类之的关系放在一个Facade类中，降低了类类之间的耦合度
电脑开关机的例子，电脑类就是个Facade
public class CPU {  
	public void startup(){  
		System.out.println("cpu startup!");  
	}     
	public void shutdown(){  
		System.out.println("cpu shutdown!");  
	}  
}  

public class Memory {  
	public void startup(){  
		System.out.println("memory startup!");  
	}  

	public void shutdown(){  
		System.out.println("memory shutdown!");  
	}  
} 

public class Disk {  
	public void startup(){  
		System.out.println("disk startup!");  
	}  
	public void shutdown(){  
		System.out.println("disk shutdown!");  
	}  
}  

public class Computer {  
	private CPU cpu;  
	private Memory memory;  
	private Disk disk;  

	public Computer(){  
		cpu = new CPU();  
		memory = new Memory();  
		disk = new Disk();  
	}  

	public void startup(){  
		System.out.println("start the computer!");  
		cpu.startup();  
		memory.startup();  
		disk.startup();  
		System.out.println("start computer finished!");  
	}  

	public void shutdown(){  
		System.out.println("begin to close the computer!");  
		cpu.shutdown();  
		memory.shutdown();  
		disk.shutdown();  
		System.out.println("computer closed!");  
	}  
}  

public class User {  
	public static void main(String[] args) {  
		Computer computer = new Computer();  
		computer.startup();  
		computer.shutdown();  
	}  
}
通过Computer类，各类之间的关系被放在了Computer类里，这样就起到了解耦的作用，降低调用复杂度。否则调用者需要知道详细的调用方法和顺序等


10.桥接模式
桥接模式就是把事物和其具体实现分开，使他们可以各自独立的变化。桥接的用意是：将抽象化与实现化解耦，使得二者可以独立变化，像常用的JDBC桥DriverManager一样，JDBC进行连接数据库的时候，在各个数据库之间进行切换，基本不需要动太多的代码，甚至丝毫不用动，原因就是JDBC提供统一接口，每个数据库提供各自的实现，用一个叫做数据库驱动的程序来桥接就行了

abstract class AbstractRoad{
	AbstractCar aCar;
	void run(){};
}
abstract class AbstractCar{
	void run(){};
}

class Street extends AbstractRoad{
	@Override
	void run() {
		// TODO Auto-generated method stub
		super.run();
		aCar.run();
		System.out.println("在市区街道行驶");
	}
}
class SpeedWay extends AbstractRoad{
	@Override
	void run() {
		// TODO Auto-generated method stub
		super.run();
		aCar.run();
		System.out.println("在高速公路行驶");
	}
}
class Car extends AbstractCar{
	@Override
	void run() {
		// TODO Auto-generated method stub
		super.run();
		System.out.print("小汽车");
	}
}
class Bus extends AbstractCar{
	@Override
	void run() {
		// TODO Auto-generated method stub
		super.run();
		System.out.print("公交车");
	}
}

public static void main(String[] args){
	
	AbstractRoad speedWay = new SpeedWay();
	speedWay.aCar = new Car();
	speedWay.run();
	
	AbstractRoad street = new Street();
	street.aCar = new Bus();
	street.run();
}
这里AbstractRoad就是一个桥接类，它桥接了AbstractCar，因为它持有AbstractCar，而AbstractCar和AbstractRoad都可以各自有自己的子类
桥接类持有目标对象的接口，这样就可以各自变化，桥接具体类的实例可以调用目标具体类的实例
桥接实际是一种组合关系，适合各自需要独立变化的情况


11.组合模式
就是Tree里面TreeNode类似的结构，组合其实是把多个对象放到一起操作


12.享元模式
其实就是共享池，一般与工厂模式共用，享元模式采用一个共享来避免大量拥有相同内容对象的开销
抽象享元(Flyweight)角色 ：给出一个抽象接口，以规定出所有具体享元角色需要实现的方法。
具体享元(ConcreteFlyweight)角色：实现抽象享元角色所规定出的接口
享元工厂(FlyweightFactory)角色 ：本角色负责创建和管理享元角色。一个客户端对象调用一个享元对象的时候，享元工厂角色会检查系统中是否已经有一个符合要求的享元对象。如果已经有了，享元工厂角色就应当提供这个已有的享元对象；如果系统中没有一个适当的享元对象的话，享元工厂角色就应当创建一个合适的享元对象。
 
public abstract class Flyweight{  
　public abstract void operation();  
}  

public class ConcreteFlyweight extends Flyweight{  
　private String string;  
　public ConcreteFlyweight(String str){  
　　string = str;  
　}  
　public void operation()  
　{  
　　System.out.println("Concrete---Flyweight : " + string);  
　}  
}  

public class FlyweightFactory{  
　private Hashtable flyweights = new Hashtable();
　public FlyweightFactory(){}  
　public Flyweight getFlyWeight(Object obj){  
　　Flyweight flyweight = (Flyweight) flyweights.get(obj);
　　if(flyweight == null){
　　　flyweight = new ConcreteFlyweight((String)obj);  
　　　flyweights.put(obj, flyweight);
　　}  
　　return flyweight;
　}  
　public int getFlyweightSize(){  
　　return flyweights.size();  
　}  
}  
注，就是连接池模式，jdbc的连接池就是这样，有的话就直接返回，没有就新建，池子满了就等待

C.关系模式
13.策略模式
策略模式定义了一系列算法，并将每个算法封装起来，使他们可以相互替换，且算法的变化不会影响到使用算法的客户。需要设计一个接口，为一系列实现类提供统一的方法，多个实现类实现该接口
public interface ICalculator {  
	public int calculate(String exp);  
}  

public class Plus extends AbstractCalculator implements ICalculator {  
	@Override  
	public int calculate(String exp) {  
		int arrayInt[] = split(exp,"\\+");  
		return arrayInt[0]+arrayInt[1];  
	}  
}  

public class Minus extends AbstractCalculator implements ICalculator {  
	@Override  
	public int calculate(String exp) {  
		int arrayInt[] = split(exp,"-");  
		return arrayInt[0]-arrayInt[1];  
	}  
}  

public class StrategyTest {  
	public static void main(String[] args) {  
		String exp = "2+8";  
		ICalculator cal = new Plus();  
		int result = cal.calculate(exp);  
		System.out.println(result);  
	}  
}  

注，策略模式的决定权在用户，系统本身提供不同算法的实现（策略），调用者系需要决定用哪个


14.模板方法模式
模板方法模式需要开发抽象类和具体子类的设计师之间的协作。抽象类给出一个轮廓和骨架，实现类给出这个方法的各个逻辑步骤，Servlet就是模板方法，do方法由HttpServlet提供，具体实现需要由实现类提供


15.观察者模式
观察者模式中有一个主题的对象和若干个观察者的对象，当“主题”的状态发生变化时，所有观察者都得到通知
观察者模式的优点：
具体主题和具体关擦或者是松耦合关系，由于主题接口仅仅依赖于观察者的接口，因此具体主题只是知道它的观察者是实现观察者接口的某个实例，但不需要知道具体是哪个类。观察者也是这样，如果增加新的实现主题接口的类，也不必修改创建具体观察者的代码
//抽象观察者角色
public interface Watcher
{
    public void update(String str);
}

//抽象主题角色，watched：被观察
public interface Watched
{
    public void addWatcher(Watcher watcher);

    public void removeWatcher(Watcher watcher);

    public void notifyWatchers(String str);

}

public class ConcreteWatcher implements Watcher
{

    @Override
    public void update(String str)
    {
        System.out.println(str);
    }

}

public class ConcreteWatched implements Watched
{
    // 存放观察者
    private List<Watcher> list = new ArrayList<Watcher>();

    @Override
    public void addWatcher(Watcher watcher)
    {
        list.add(watcher);
    }

    @Override
    public void removeWatcher(Watcher watcher)
    {
        list.remove(watcher);
    }

    @Override
    public void notifyWatchers(String str)
    {
        /* 实际调用各个观察者的回调函数
           很重要，用一个for循环遍历观察者
        */
        for (Watcher watcher : list)
        {
            watcher.update(str);
        }
    }

}

public class Test
{
    public static void main(String[] args)
    {
        Watched girl = new ConcreteWatched();
        
        Watcher watcher1 = new ConcreteWatcher();
        Watcher watcher2 = new ConcreteWatcher();
        Watcher watcher3 = new ConcreteWatcher();
        
        girl.addWatcher(watcher1);
        girl.addWatcher(watcher2);
        girl.addWatcher(watcher3);
        
        girl.notifyWatchers("开心");
    }
}


16.迭代器模式
基本思路就是用一个迭代器去迭代一个集合，而不是调用者直接操作。迭代器角色的加入，就可以很好的避免容器内部细节的暴露，而且也使得设计符合单一职责原则

interface Iterator {

    public Object next();

    public boolean hasNext();

}

class ConcreteIterator implements Iterator {
    private List<Object> list;
    private int cursor = 0;// 当前游标位置

    public ConcreteIterator(List<Object> list) {
        this.list = list;

    }

    public boolean hasNext() {
        // TODO Auto-generated method stub
        return !(cursor == list.size());
    }

    public Object next() {
        // TODO Auto-generated method stub
        Object obj = null;
        if (hasNext()) {
            obj = list.get(cursor++);
        }
        return obj;
    }
}

// 模拟集合接口 增删 差(遍历)
interface Aggregate {

    public void add(Object obj);

    public void remove(Object obj);

    //持有Iterator引用，这个很重要
    public Iterator iterator();

}

class ConcreteAggregate implements Aggregate {
    private List<Object> list;

    public ConcreteAggregate(List<Object> list) {
        this.list = list;

    }

    public void add(Object obj) {
        list.add(obj);

    }

    public Iterator iterator() {
        // TODO Auto-generated method stub
        return new ConcreteIterator(list);
    }

    public void remove(Object obj) {
        list.remove(obj);

    }

}

public static void main(String[] args) {
        List<Object> list = new ArrayList<Object>();
        list.add("a");
        list.add("b");
        list.add("c");
        Aggregate aggregate = new ConcreteAggregate(list);
        Iterator iterator = aggregate.iterator();

        while (iterator.hasNext()) {
            String o = (String) iterator.next();
            System.out.println(o);
        }
    }
}


17.责任链模式
有多个对象，每个对象持有对下一个对象的引用，这样就会形成一条链，请求在这条链上传递，直到某一对象决定处理该请求。但是发出者并不清楚到底最终那个对象会处理该请求，所以，责任链模式可以实现，在隐瞒客户端的情况下，对系统进行动态的调整。
情景：有多个的对象可以处理一个请求，哪个对象处理该请求运行时刻自动确定

可以使用责任链模式来实现上述功能：当某人提出聚餐费用申请的请求后，该请求会在 项目经理—〉部门经理—〉总经理 这样一条领导处理链上进行传递，发出请求的人并不知道谁会来处理他的请求，每个领导会根据自己的职责范围，来判断是处理请求还是把请求交给更高级别的领导，只要有领导处理了，传递就结束了

public abstract class Handler {

    //持有下一个处理请求的对象
    protected Handler successor = null;

    public Handler getSuccessor() {
        return successor;
    }

    //设置下一个处理请求的对象
    public void setSuccessor(Handler successor) {
        this.successor = successor;
    }

    //处理聚餐费用的申请
    public abstract String handleFeeRequest(double fee);
}

public class ProjectManager extends Handler {

    @Override
    public String handleFeeRequest(double fee) {
        
        String str = "";
        //项目经理权限比较小，只能在500以内
        if(fee < 500)
        {
                str = "成功：项目经理同意聚餐费用，金额为" + fee + "元";    

        }
        else
        {
            //超过500，继续传递给级别更高的人处理
            if(getSuccessor() != null)
            {
                return getSuccessor().handleFeeRequest(fee);
            }
        }
        return str;
}

public class DeptManager extends Handler {

    @Override
    public String handleFeeRequest(double fee) {
        
        String str = "";
        //部门经理的权限只能在1000以内
        if(fee < 1000)
        {

            str = "成功：部门经理同意聚餐费用，金额为" + fee + "元";    

        }
        else
        {
            //超过1000，继续传递给级别更高的人处理
            if(getSuccessor() != null)
            {
                return getSuccessor().handleFeeRequest(fee);
            }
        }
        return str;
    }
}

public class GeneralManager extends Handler {

    @Override
    public String handleFeeRequest(double fee) {
        
        String str = "";
        //总经理的权限很大，只要请求到了这里，他都可以处理
        if(fee >= 1000)
        {
            str = "成功：总经理同意【" + user + "】的聚餐费用，金额为" + fee + "元";    
        }
        else
        {
            //如果还有后继的处理对象，继续传递
            if(getSuccessor() != null)
            {
                return getSuccessor().handleFeeRequest(fee);
            }
        }
        return str;
    }
}

public class Client {
    public static void main(String[] args) {
        //先要组装责任链
        Handler h1 = new GeneralManager();
        Handler h2 = new DeptManager();
        Handler h3 = new ProjectManager();
        h3.setSuccessor(h2);
        h2.setSuccessor(h1);
        
        //开始测试
        String test1 = h3.handleFeeRequest(300);
        System.out.println("test1 = " + test1);

        String test4 = h3.handleFeeRequest(700);
        System.out.println("test2 = " + test2);
        
        String test6 = h3.handleFeeRequest(1500);
        System.out.println("test3 = " + test3);
    }
}
注，其实还可以这样写，不用设置后继者，更清楚
List<Handler> hList = new LinkedList
for(Handler h:hlist) {
	if(!h.handleFeeRequest(number).equals("")) 
		break;
}
注，核心是有一个Filter接口，多个实现类，通过设置后继者或列表遍历调用具体实现类


18.命令模式
司令员下令让士兵去干件事情，从整个事情的角度来考虑，司令员的作用是，发出口令，口令经过传递，传到了士兵耳朵里，士兵去执行。这个过程好在，三者相互解耦，任何一方都不用去依赖其他人，只需要做好自己的事儿就行。
Invoker是调用者（司令员），Receiver是被调用者（士兵），MyCommand是命令
public interface Command {  
	public void exe();  
}  

public class MyCommand implements Command {  
	private Receiver receiver;  //持有接收者

	public MyCommand(Receiver receiver) {  
		this.receiver = receiver;  
	}  

	@Override  
	public void exe() {  
		receiver.action();//执行命令
	}  
}  

public class Receiver {  
	public void action(){  
		System.out.println("command received!");  
	}  
}  

public class Invoker {  
   
	private Command command;  //持有command

	public Invoker(Command command) {  
		this.command = command;  
	}  

	public void action(){  
		command.exe();  
	}  
}  

public class Test {  

	public static void main(String[] args) {  
		Receiver receiver = new Receiver();  
		Command cmd = new MyCommand(receiver);  
		Invoker invoker = new Invoker(cmd);  
		invoker.action();  
	}  
}  

命令模式的目的就是达到命令的发出者和执行者之间解耦，实现请求和执行分开。


19.备忘录模式
发起人（Originator）角色：创建一个含有当前的内部状态的备忘录对象；使用备忘录对象存储其内部状态。
备忘录（Memento）角色：备忘录对象将发起人对象传入的状态存储起来。
负责人（Caretaker）角色：负责保存备忘录对象；不检查备忘录对象的内容。

public class Originator {

    private String state;
    /**
     * 工厂方法，返回一个新的备忘录对象
     */
    public Memento createMemento(){
        return new Memento(state);
    }
    /**
     * 将发起人恢复到备忘录对象所记载的状态
     */
    public void restoreMemento(Memento memento){
        this.state = memento.getState();
    }
    
    public String getState() {
        return state;
    }
    
    public void setState(String state) {
        this.state = state;
        System.out.println("当前状态：" + this.state);
    }
    
}

public class Memento {
    
    private String state;
    
    public Memento(String state){
        this.state = state;
    }

    public String getState() {
        return state;
    }

    public void setState(String state) {
        this.state = state;
    }
    
}

public class Caretaker {

    private Memento memento;
    /**
     * 备忘录的取值方法
     */
    public Memento retrieveMemento(){
        return this.memento;
    }
    /**
     * 备忘录的赋值方法
     */
    public void saveMemento(Memento memento){
        this.memento = memento;
    }
}

public class Client {

    public static void main(String[] args) {
        
        Originator o = new Originator();
        Caretaker c = new Caretaker();
        //改变负责人对象的状态
        o.setState("On");
        //创建备忘录对象，并将发起人对象的状态储存起来
        c.saveMemento(o.createMemento());
        //修改发起人的状态
        o.setState("Off");
        //恢复发起人对象的状态
        o.restoreMemento(c.retrieveMemento());
        
        System.out.println(o.getState());
    }

}
注，注意发起者并不持有备忘录的引用，而是负责人持有备忘录对象


20.状态模式
是状态模式把所研究的对象的行为包装在不同的状态对象里，状态模式的意图让一个对象在其内部状态改变的时候，其行为也随之改变。

//状态接口
public interface VoteState {
    /**
     * 处理状态对应的行为
     * @param user    投票人
     * @param voteItem    投票项
     * @param voteManager    投票上下文，用来在实现状态对应的功能处理的时候，
     *                         可以回调上下文的数据
     */
    public void vote(String user,String voteItem,VoteManager voteManager);
}

//具体状态类，正常投票
public class NormalVoteState implements VoteState {

    @Override
    public void vote(String user, String voteItem, VoteManager voteManager) {
        //正常投票，记录到投票记录中
        voteManager.getMapVote().put(user, voteItem);
        System.out.println("恭喜投票成功");
    }

}

//具体状态类——重复投票
public class RepeatVoteState implements VoteState {

    @Override
    public void vote(String user, String voteItem, VoteManager voteManager) {
        //重复投票，暂时不做处理
        System.out.println("请不要重复投票");
    }

}

//具体状态类—恶意刷票
public class SpiteVoteState implements VoteState {

    @Override
    public void vote(String user, String voteItem, VoteManager voteManager) {
        // 恶意投票，取消用户的投票资格，并取消投票记录
        String str = voteManager.getMapVote().get(user);
        if(str != null){
            voteManager.getMapVote().remove(user);
        }
        System.out.println("你有恶意刷屏行为，取消投票资格");
    }

}


public class VoteManager {
    //持有状体处理对象
    private VoteState state = null;
    //记录用户投票的结果，Map<String,String>对应Map<用户名称，投票的选项>
    private Map<String,String> mapVote = new HashMap<String,String>();
    //记录用户投票次数，Map<String,Integer>对应Map<用户名称，投票的次数>
    private Map<String,Integer> mapVoteCount = new HashMap<String,Integer>();
    /**
     * 获取用户投票结果的Map
     */
    public Map<String, String> getMapVote() {
        return mapVote;
    }
    /**
     * 投票
     * @param user    投票人
     * @param voteItem    投票的选项
     */
    public void vote(String user,String voteItem){
        //1.为该用户增加投票次数
        //从记录中取出该用户已有的投票次数
        Integer oldVoteCount = mapVoteCount.get(user);
        if(oldVoteCount == null){
            oldVoteCount = 0;
        }
        oldVoteCount += 1;
        mapVoteCount.put(user, oldVoteCount);
        //2.判断该用户的投票类型，就相当于判断对应的状态
        //到底是正常投票、重复投票、恶意投票还是上黑名单的状态
        if(oldVoteCount == 1){
            state = new NormalVoteState();
        }
        else if(oldVoteCount > 1 && oldVoteCount < 5){
            state = new RepeatVoteState();
        }
        else if(oldVoteCount >= 5){
            state = new BlackVoteState();
        }
        //然后转调状态对象来进行相应的操作
        state.vote(user, voteItem, this);
    }
}

public class Client {

    public static void main(String[] args) {
        
        VoteManager vm = new VoteManager();
        for(int i=0;i<=5;i++){
            vm.vote("u1","A");
        }
    }

}
注，上面这个例子中，有几个关键点，接口，具体类，状态管理类，状态管理类对不同的状态返回不同的类，而这些类都有一个共同的接口，看起来就是根据不同的状态执行不同的操作，解耦了状态和行为的映射，可以任意插入新的具体实现类来实现扩展，和责任链有些类似，可以随意添加，防止了大量的if else中处理逻辑的状态


21.访问者模式
访问者模式是一种分离对象数据结构与行为的方法，通过这种分离，可以为一个已存在的类（即被访问者）增加新的操作（即访问者）而无须为它们进行修改。
interface Service {

    public void accept(Visitor visitor);
}

class Visitor {

    public void process(Service service) {
        // 基本业务
        System.out.println("基本业务");
    }

    public void process(Saving service) {
        // 存款
        System.out.println("存款");
    }

    public void process(Draw service) {
        // 提款
        System.out.println("提款");
    }

    public void process(Fund service) {
        System.out.println("基金");
        // 基金
    }

}

class Saving implements Service {

    public void accept(Visitor visitor) {
        visitor.process(this);

    }
}

class Draw implements Service {

    public void accept(Visitor visitor) {
        visitor.process(this);

    }
}

class Fund implements Service {

    public void accept(Visitor visitor) {
        visitor.process(this);

    }
}

// 正常逻辑实现

        Service service1 = new Saving();
        Service service2 = new Fund();
        Service service3 = new Draw();
        List<Service> ls = new ArrayList<Service>();
        ls.add(service1);
        ls.add(service2);
        ls.add(service3);
        for (Service service : ls) {
            if (service instanceof Saving) {
                System.out.println("存款");
            } else if (service instanceof Fund) {
                System.out.println("基金");
            } else if (service instanceof Draw) {
                System.out.println("提款");
            }
        }
        //上述的问题是随着业务量增大 代码维护量会非常的大 需要不断的去判断 
        
        //采用访问者模式解决
        Service saving = new Saving();
        Service fund = new Fund();
        Service draw = new Draw();
        Visitor visitor = new Visitor();
        saving.accept(visitor);
        fund.accept(visitor);
        draw.accept(visitor);
        //上述中accept中实际上有观察者的影子 实际上 访问者我们也可以理解成一个对业务熟悉的观察者
        //他不断观察者是否有新的业务需求 有的话 进行相应的业务处理

注，visitor实际就是一个处理类，把各个处理方法放到visitor内，处理的是service的具体实现类，这样，当需要扩展时，直接在visitor中添加就行，降低调用者的复杂度，各种判断处理都放在访问者类内。调用时，具体实现类accept访问者对象，把this传递给visitor
访问者模式使你可以在不改变类层次结构的前提下，为该结构增加新的行为。该模式的机制包括为访问者定义一个接口，为层次关系中的所有访问者增加一个accept()方法。accept()方法使用双重委派技术，将其调用委派给访问者。类层次结构中的对象可以根据其类型调用核实的visit()方法。


22.中介者模式
它主要包含如下几个角色：

Mediator: 抽象中介者。定义了同事对象到中介者对象之间的接口。

ConcreteMediator: 具体中介者。实现抽象中介者的方法，它需要知道所有的具体同事类，同时需要从具体的同事类那里接收信息，并且向具体的同事类发送信息。

Colleague: 抽象同事类。

ConcreteColleague: 具体同事类。每个具体同事类都只需要知道自己的行为即可，但是他们都需要认识中介者。

通过中介者对象对关系的封装，使得具体的同事类不再需要显示的引用其他对象，它只需要通过中介者就可以完成与其他同事类之间的通信。

public abstract class Mediator {
    //申明一个联络方法
    public abstract void constact(String message,Person person);
}

public abstract class Person {
    protected String name;
    protected Mediator mediator;

    Person(String name,Mediator mediator){
        this.name = name;
        this.mediator = mediator;
    }

}

public class HouseOwner extends Person{

    HouseOwner(String name, Mediator mediator) {
        super(name, mediator);
    }

    /**
     * @desc 与中介者联系
     * @param message
     * @return void
     */
    public void constact(String message){
        mediator.constact(message, this);
    }

    /**
     * @desc 获取信息
     * @param message
     * @return void
     */
    public void getMessage(String message){
        System.out.println("房主:" + name +",获得信息：" + message);
    }
}

public class Tenant extends Person{

    Tenant(String name, Mediator mediator) {
        super(name, mediator);
    }

    /**
     * @desc 与中介者联系
     * @param message
     * @return void
     */
    public void constact(String message){
        mediator.constact(message, this);
    }

    /**
     * @desc 获取信息
     * @param message
     * @return void
     */
    public void getMessage(String message){
        System.out.println("租房者:" + name +",获得信息：" + message);
    }
}

public class MediatorStructure extends Mediator{
    //首先中介结构必须知道所有房主和租房者的信息
    private HouseOwner houseOwner;
    private Tenant tenant;

    public HouseOwner getHouseOwner() {
        return houseOwner;
    }

    public void setHouseOwner(HouseOwner houseOwner) {
        this.houseOwner = houseOwner;
    }

    public Tenant getTenant() {
        return tenant;
    }

    public void setTenant(Tenant tenant) {
        this.tenant = tenant;
    }

    public void constact(String message, Person person) {
        if(person == houseOwner){          //如果是房主，则租房者获得信息
            tenant.getMessage(message);
        }
        else{       //否则则是房主获得信息
            houseOwner.getMessage(message);
        }
    }
}

public class Client {
    public static void main(String[] args) {
        //一个房主、一个租房者、一个中介机构
        MediatorStructure mediator = new MediatorStructure();

        //房主和租房者只需要知道中介机构即可
        HouseOwner houseOwner = new HouseOwner("张三", mediator);
        Tenant tenant = new Tenant("李四", mediator);

        //中介结构要知道房主和租房者
        mediator.setHouseOwner(houseOwner);
        mediator.setTenant(tenant);

        tenant.constact("听说你那里有三室的房主出租.....");
        houseOwner.constact("是的!请问你需要租吗?");
    }
}

中介者模式的核心是中介者持有两个具体实现类的对象，两个实现类中都持有中介者的对象，这样，实现类只需要知道中介者的存在即可，它的请求都通过中介者来处理
有点类似Spring的依赖注入


23.解释器模式
给定一个语言之后，解释器模式可以定义出其文法的一种表示，并同时提供一个解释器，通过调用解释器获得语义。用于编写编译器，平时感觉用到的可能性不大

